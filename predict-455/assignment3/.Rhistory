METWAS$Date_Adjusted_DOW <- format(METWAS$Date_Adjusted,"%A")
METWAS$Date_Adjusted_Year <- format(METWAS$Date_Adjusted,"%Y")
library(openxlsx)
directory_location <- 'C:/Users/00811289/Documents/01.projects/top200/lift/'
setwd(directory_location)
METWAS <- read.xlsx('top200markets_METWAS_lift.xlsx', sheet=1)
# Adjust date
METWAS$Date <- as.Date(METWAS$Date, origin = "1899-12-30")
METWAS$Date_Month <- format(METWAS$Date, "%B")
METWAS$Date_DOW <- format(METWAS$Date,"%A")
METWAS$Date_Year <- format(METWAS$Date,"%Y")
# Adjust Date
METWAS$Date_Adjusted[METWAS$Date < as.Date('2018-01-01', origin = "1899-12-30")] <- as.Date(METWAS$Date +  364, origin = "1899-12-30")
METWAS$Date_Adjusted[METWAS$Date >= as.Date('2018-01-01', origin = "1899-12-30")] <- as.Date(METWAS$Date, origin = "1899-12-30")
METWAS$Date_Adjusted <- as.Date(METWAS$Date_Adjusted, origin = "1899-12-30")
METWAS$Date_Adjusted[METWAS$Date < as.Date('2018-01-01', origin = "1899-12-30")] <- as.Date(METWAS$Date +  364, origin = "1899-12-30")
METWAS$Date_Adjusted[METWAS$Date >= as.Date('2018-01-01', origin = "1899-12-30")] <- as.Date(METWAS$Date, origin = "1899-12-30")
METWAS$Date_Adjusted <- as.Date(METWAS$Date_Adjusted, origin = "1899-12-30")
METWAS$Date_Adjusted_Month <- format(METWAS$Date_Adjusted, "%B")
METWAS$Date_Adjusted_DOW <- format(METWAS$Date_Adjusted,"%A")
METWAS$Date_Adjusted_Year <- format(METWAS$Date_Adjusted,"%Y")
View(METWAS)
summary(METWAS)
is.even <- function(x) x %% 2 == 0
ie.even(2)
is.even(2)
is.even(3)
is.even <- function(x) x %% 2 == 0
METWAS$Direction[is.even(METWAS$Arrow.Trn.Nbr) == TRUE] <- "North"
METWAS$Direction[is.even(METWAS$Arrow.Trn.Nbr) == FALSE] <- "South
""
"
METWAS$Direction[is.even(METWAS$Arrow.Trn.Nbr) == TRUE] <- "North"
METWAS$Direction[is.even(METWAS$Arrow.Trn.Nbr) == FALSE] <- "South"
METWAS$Direction[is.even(METWAS$Arrow.Trn.Nbr) = TRUE] <- "North"
?as.integer
METWAS$Direction[is.even(as.integer(METWAS$Arrow.Trn.Nbr)) == TRUE] <- "North"
View(METWAS)
METWAS$Direction[is.even(as.integer(METWAS$Arrow.Trn.Nbr)) == TRUE] <- "North"
METWAS$Direction[is.even(as.integer(METWAS$Arrow.Trn.Nbr)) == FALSE] <- "South"
setwd("~/Desktop")
# Visualizing Time Jump-Start Code for Financial Time Series
# begin by installing the packages quantmod, lubridate, latticeExtra, and zoo
# install.packages("quantmod")
# install.packages("lubridate")
# install.packages("latticeExtra")
# install.packages("zoo")
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
library(latticeExtra) # package used for horizon plot
library(zoo) # utilities for working with time series
install.packages(c("latticeExtra", "zoo", "quantmod"))
# Set working directory
# The below references the Desktop on my Mac
setwd("~/Desktop")
getwd
getwd()
# Set working directory
# The below references the Desktop on my Mac
setwd("C:/Users/00811289/Desktop/assignment3")
# University of Michigan: Consumer Sentiment, not seasonally adjusted (monthly, 1966 = 100)
getSymbols("UMCSENT",src="FRED",return.class = "xts")
# install.packages("zoo")
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
library(latticeExtra) # package used for horizon plot
library(zoo) # utilities for working with time series
# ---------------------------------
# University of Michigan: Consumer Sentiment, not seasonally adjusted (monthly, 1966 = 100)
getSymbols("UMCSENT",src="FRED",return.class = "xts")
print(str(UMCSENT)) # show the structure of this xtx time series object
# plot the series
chartSeries(UMCSENT,theme="white")
# Additional plot
getSymbols("CPIAUCNS",src="FRED",return.class = "xts")
print(str(CPIAUCNS)) # show the structure of this xtx time series object
# plot the series
chartSeries(CPIAUCNS,theme="white")
?chartSeries()
# New Homes Sold in the US, not seasonally adjusted (monthly, thousands)
getSymbols("HSN1FNSA",src="FRED",return.class = "xts")
print(str(HSN1FNSA)) # show the structure of this xtx time series object
# plot the series
chartSeries(HSN1FNSA,theme="white")
# get Apple stock price data
getSymbols("AAPL",return.class = "xts")
print(str(AAPL)) # show the structure of this xtx time series object
# plot the series stock price
chartSeries(AAPL,theme="white")
# plot the series stock price
chartSeries(AAPL,theme="white")
# get IBM stock price data
getSymbols("IBM",return.class = "xts")
print(str(IBM)) # show the structure of this xtx time series object
# plot the series stock price
chartSeries(IBM,theme="white")
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
library(latticeExtra) # package used for horizon plot
library(zoo)  # utilities for working with time series
# University of Michigan Index of Consumer Sentiment (1Q 1966 = 100)
getSymbols("UMCSENT", src="FRED", return.class = "xts")
ICS <- UMCSENT # use simple name for xts object
dimnames(ICS)[2] <- "ICS" # use simple name for index
chartSeries(ICS, theme="white")
ICS.data.frame <- as.data.frame(ICS)
ICS.data.frame$date <- ymd(rownames(ICS.data.frame))
ICS.time.series <- ts(ICS.data.frame$ICS,
start = c(year(min(ICS.data.frame$date)), month(min(ICS.data.frame$date))),
end = c(year(max(ICS.data.frame$date)),month(max(ICS.data.frame$date))),
frequency=12)
getSymbols("HSN1FNSA",src="FRED",return.class = "xts")
NHS <- HSN1FNSA
dimnames(NHS)[2] <- "NHS" # use simple name for index
chartSeries(NHS, theme="white")
NHS.data.frame <- as.data.frame(NHS)
NHS.data.frame$date <- ymd(rownames(NHS.data.frame))
NHS.time.series <- ts(NHS.data.frame$NHS,
start = c(year(min(NHS.data.frame$date)),month(min(NHS.data.frame$date))),
end = c(year(max(NHS.data.frame$date)),month(max(NHS.data.frame$date))),
frequency=12)
# define multiple time series object
economic.mts <- cbind(ICS.time.series,
NHS.time.series)
dimnames(economic.mts)[[2]] <- c("ICS","NHS") # keep simple names
modeling.mts <- na.omit(economic.mts) # keep overlapping time intervals only
# examine the structure of the multiple time series object
# note that this is not a data frame object
print(str(modeling.mts))
# plot multiple time series using standard R graphics
plot(modeling.mts,main="")
# plot multiple time series using standard R graphics
plot(modeling.mts,main="")
print(horizonplot(modeling.mts, colorkey = TRUE,
layout = c(1,2), strip.left = FALSE,
ylab = list(rev(colnames(modeling.mts)), rot = 0, cex = 0.7)) +
layer_(panel.fill(col = "gray90"), panel.xblocks(..., col = "white")))
# -----------------------------------------
# Prepare data frame for ggplot2 work
# -----------------------------------------
# for zoo examples see vignette at
# <http://cran.r-project.org/web/packages/zoo/vignettes/zoo-quickref.pdf>
modeling_data_frame <- as.data.frame(modeling.mts)
modeling_data_frame$Year <- as.numeric(time(modeling.mts))
# examine the structure of the data frame object
# notice an intentional shift to underline in the data frame name
# this is just to make sure we keep our object names distinct
# also you will note that programming practice for database work
# and for work with Python is to utilize underlines in variable names
# so it is a good idea to use underlines generally
print(str(modeling_data_frame))
print(head(modeling_data_frame))
# -----------------------------------------
# ggplot2 time series plot
# -----------------------------------------
# with a data frame object in hand... we can go on to use ggplot2
# and methods described in Chang (2013) R Graphics Cookbook
# note. attepting to use ggplot2 and latticeExtra in the same program
# can cause problems... due to problems with the layer() function
# so we will not use lattice after this point in our code
library(ggplot2)
plotting_object <- ggplot(modeling_data_frame, aes(x = Year, y = ICS)) +
geom_line() +
annotate("rect", xmin = 2007.917, xmax = 2009.417,
ymin = min(modeling_data_frame$ICS), ymax = max(modeling_data_frame$ICS),
alpha = 0.3, fill = "red") +
ylab("Index of Consumer Sentiment") +
ggtitle("Great Recession and Consumer Sentiment")
plotting_object <- ggplot(modeling_data_frame, aes(x = Year, y = ICS)) +
geom_line() +
annotate("rect", xmin = 2007.917, xmax = 2009.417,
ymin = min(modeling_data_frame$ICS), ymax = max(modeling_data_frame$ICS),
alpha = 0.3, fill = "red") +
ylab("Index of Consumer Sentiment") +
ggtitle("Great Recession and Consumer Sentiment")
print(plotting_object)
require(stats); require(graphics)
## work with pre-seatbelt period to identify a model, use logs
work <- window(log10(UKDriverDeaths), end = 1982+11/12)
par(mfrow = c(3, 1))
plot(work); acf(work); pacf(work)
par(mfrow = c(1, 1))
(fit <- arima(work, c(1, 0, 0), seasonal = list(order = c(1, 0, 0))))
z <- predict(fit, n.ahead = 24)
ts.plot(log10(UKDriverDeaths), z$pred, z$pred+2*z$se, z$pred-2*z$se,
lty = c(1, 3, 2, 2), col = c("black", "red", "blue", "blue"))
## now see the effect of the explanatory variables
X <- Seatbelts[, c("kms", "PetrolPrice", "law")]
X[, 1] <- log10(X[, 1]) - 4
arima(log10(Seatbelts[, "drivers"]), c(1, 0, 0),
seasonal = list(order = c(1, 0, 0)), xreg = X)
UKDriverDeaths
deaths <- UKDriverDeaths
head(deaths)
summary(deaths)
deaths <- Seatbelts
deaths
summary(deaths)
head(deaths)
head(deaths$drivers)
deaths <- Seatbelts
summary(deaths)
head(deaths)
summary(deaths)
# University of Michigan Index of Consumer Sentiment (1Q 1966 = 100)
getSymbols("UMCSENT", src="FRED", return.class = "xts")
ICS <- UMCSENT # use simple name for xts object
dimnames(ICS)[2] <- "ICS" # use simple name for index
chartSeries(ICS, theme="white")
ICS.data.frame <- as.data.frame(ICS)
deaths.data.frame <- as.data.frame(deaths)
head(deaths.data.frame)
deaths <- Seatbelts
summary(deaths)
deaths.data.frame <- as.data.frame(deaths)
head(deaths.data.frame)
View(deaths.data.frame)
# University of Michigan Index of Consumer Sentiment (1Q 1966 = 100)
getSymbols("UMCSENT", src="FRED", return.class = "xts")
ICS <- UMCSENT # use simple name for xts object
dimnames(ICS)[2] <- "ICS" # use simple name for index
chartSeries(ICS, theme="white")
ICS.data.frame <- as.data.frame(ICS)
View(ICS.data.frame)
?ymd
ICS.data.frame$date <- ymd(rownames(ICS.data.frame))
View(ICS.data.frame)
View(deaths.data.frame)
deaths.data.frame$date <- ymd(rownames(deaths.data.frame))
deaths
deaths.data.frame
?as.data.frame
typeof(deaths)
typeof(deaths.data.frame)
str(deaths)
df <- fortify(deaths)
df <- as.data.table(deaths)
df <- as.data.frame.table(deaths)
df
View(deaths.data.frame)
summary(deaths)
deaths
time(deaths)
deaths.data.frame$date <- date=time(deaths)
deaths.data.frame$date <- time(deaths)
View(deaths.data.frame)
deaths.data.frame$date <- as.date(time(deaths))
deaths.data.frame$date <- as.Date(time(deaths))
View(deaths.data.frame)
library(ggplot2)
deaths <- Seatbelts
summary(deaths)
deaths_data_frame <- as.data.frame(deaths)
head(deaths_data_frame)
# add date back to data frame
deaths_data_frame$date <- as.Date(time(deaths))
View(deaths_data_frame)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
#annotate("rect", xmin = 2007.917, xmax = 2009.417,
#         ymin = min(modeling_data_frame$ICS), ymax = max(modeling_data_frame$ICS),
#         alpha = 0.3, fill = "red") +
ylab("Drivers Killed") +
ggtitle("Drivers Killed over time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = 1983-02-01, xmax = 1984-12-01,
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "red") +
ylab("Drivers Killed") +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = "1983-02-01", xmax = "1984-12-01",
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "red") +
ylab("Drivers Killed") +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "red") +
ylab("Drivers Killed") +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "red") +
ylab("Drivers Killed") +
xlab("Date") +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightskyblue1") +
ylab("Drivers Killed") +
xlab("Date") +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_grey() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_minimal() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
ggplot(deaths_data_frame, aes(x = date, y = kms)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
library(ggplot2)
deaths <- Seatbelts
summary(deaths)
deaths_data_frame <- as.data.frame(deaths)
head(deaths_data_frame)
# add date back to data frame
deaths_data_frame$date <- as.Date(time(deaths))
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
library(zoo)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE))) +
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE)),colour="green") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
# Plot drivers killed over time with moving average and annotated section indicating seatbelt law
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_tufte() +
ggtitle("Drivers Killed Over Time")
install.packages("ggthemes")
library(ggthemes)
# Plot drivers killed over time with moving average and annotated section indicating seatbelt law
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_tufte() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
# Plot drivers killed over time with moving average and annotated section indicating seatbelt law
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = kms)) +
geom_line() +
geom_line(aes(y=rollmean(kms, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$kms), ymax = max(deaths_data_frame$kms),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
# Plot drivers killed over time with moving average and annotated section indicating seatbelt law
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled/kms)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled/kms, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled/deaths_data_frame$kms), ymax = max(deaths_data_frame$DriversKilled/deaths_data_frame$kms),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
# Plot drivers killed over time with moving average and annotated section indicating seatbelt law
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled), ymax = max(deaths_data_frame$DriversKilled),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Over Time")
print(plotting_object)
# Plot drivers killed over time with moving average and annotated section indicating seatbelt law
plotting_object <- ggplot(deaths_data_frame, aes(x = date, y = DriversKilled/kms)) +
geom_line() +
geom_line(aes(y=rollmean(DriversKilled/kms, 12, na.pad=TRUE)),colour="olivedrab") + # Rolling average
annotate("rect", xmin = as.Date("1983-02-01", "%Y-%m-%d"),
xmax = as.Date("1984-12-01",  "%Y-%m-%d"),
ymin = min(deaths_data_frame$DriversKilled/deaths_data_frame$kms), ymax = max(deaths_data_frame$DriversKilled/deaths_data_frame$kms),
alpha = 0.3, fill = "lightgreen") +
ylab("Drivers Killed / Kilometer Driven") +
xlab("Date") +
theme_classic() +
ggtitle("Drivers Killed Per Kilometer Driven Over Time")
print(plotting_object)
?Seatbelts
