new_courses <- c("Python_Course_Interest", "Foundations_DE_Course_Interest", "Analytics_App_Course_Interest", "Systems_Analysis_Course_Interest")
new_courses_data_frame <- working_survey_input[,new_courses]
head(new_courses_data_frame)
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses")
new_courses_data_frame <- new_courses_data_frame/100
head(new_courses_data_frame)
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses")
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim = 300)
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses")
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(300,0))
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,300))
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,200))
# Show which new courses are preferred
new_courses <- c("Python_Course_Interest", "Foundations_DE_Course_Interest", "Analytics_App_Course_Interest", "Systems_Analysis_Course_Interest")
new_courses_data_frame <- working_survey_input[,new_courses]
head(new_courses_data_frame)
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,200))
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,2000))
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,20000))
colnames(elective_data_frame) <- c("Python", "Foundations", "Analytics App", "Systems Analysis")
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,20000))
new_courses <- c("Python_Course_Interest", "Foundations_DE_Course_Interest", "Analytics_App_Course_Interest", "Systems_Analysis_Course_Interest")
new_courses_data_frame <- working_survey_input[,new_courses]
head(new_courses_data_frame)
colnames(new_courses_data_frame) <- c("Python", "Foundations", "Analytics App", "Systems Analysis")
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="Elective Courses", ylim=c(0,20000))
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="New Course Preferences", ylim=c(0,20000))
mean(working_survey_input$Courses_Completed)
help(mean)
mean(working_survey_input$Courses_Completed,na.rm=TRUE)
# Chart of Language Preference by time in program
head(working_survey_input)
plot(working_survey_input,type = "o", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
help(plot)
plot(working_survey_input,type = "l", col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
preferences_time <- c("Courses_Completed", "Java", "JavaScript", "Python", "R", "SAS")
head(working_survey_input)
preferences_time <- c("Courses_Completed", "Java", "JavaScript", "Python", "R", "SAS")
preferences_time_data_frame <- working_survey_input[,preferences_time]
head(preferences_time_data_frame)
xrange <- range(preferences_time_data_frame$Courses_Completed)
help(ranger)
help(range)
y_range <- range(preferences_time_data_frame[,1:5])
y_range
y_range <- range(preferences_time_data_frame[,1:5], na.rm=TRUE)
y_range
x_range <- range(preferences_time_data_frame$Courses_Completed, na.rm=TRUE)
y_range <- range(preferences_time_data_frame[,1:5], na.rm=TRUE)
y_range
plot(x_range, y_range, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
head(preferences_time_data_frame)
plot(preferences_time_data_frame$Java, type="o")
help(plot)
plot(preferences_time_data_frame$Java, y=Courses_Completed,type="o")
plot(preferences_time_data_frame$Java, y=preferences_time_data_frame$Courses_Completed,type="o")
plot(x=preferences_time_data_frame$Courses_Completed, y= preferences_time_data_frame$Java,type="o")
plot(x=preferences_time_data_frame$Courses_Completed, y= mean(preferences_time_data_frame$Java),type="o")
head(preferences_time_data_frame)
help(melt)
cast(preferences_time_data_frame, Courses_Completed ~ Java)
library(reshape2)
cast(preferences_time_data_frame, Courses_Completed ~ Java)
install.packages("reshape")
library(reshape)
cast(preferences_time_data_frame, Courses_Completed ~ Java)
help("melt")
melt(preferences_time_data_frame)
dcast(preferences_time_data_frame, Courses_Completed ~ variable, mean)
dcast(preferences_time_data_frame, preferences_time_data_frame$Courses_Completed ~ variable, mean)
dcast(preferences_time_data_frame, preferences_time_data_frame$Courses_Completed ~ ., mean)
dcast(preferences_time_data_frame, preferences_time_data_frame$Courses_Completed ~ , mean)
dcast(preferences_time_data_frame, preferences_time_data_frame$Courses_Completed ~preferences_time_data_frame$Java , mean)
meltExpensesByMonth <- melt(preferences_time_data_frame, id.vars=1:2)
head(meltExpensesByMonth)
head(preferences_time_data_frame)
reshape(preferences_time_data_frame)
reshape(preferences_time_data_frame,direction = “long”)
reshape(preferences_time_data_frame,direction ="long")
reshape(preferences_time_data_frame, varying ='test',direction = "long")
reshape(preferences_time_data_frame, varying ='test',direction = "long", idvar="preferences_time_data_frame$Courses_Completed")
reshape(preferences_time_data_frame, varying =c("Language"),direction = "long", idvar="preferences_time_data_frame$Courses_Completed")
reshape(preferences_time_data_frame, varying =c(2:6),direction = "long", idvar="preferences_time_data_frame$Courses_Completed")
reshape(preferences_time_data_frame, varying = c(2:6), direction = "long", idvar="preferences_time_data_frame$Courses_Completed")
reshape(preferences_time_data_frame, varying = c(2:6), direction = "long", idvar="preferences_time_data_frame$Courses_Completed", timevar=mean)
reshape(preferences_time_data_frame, varying = c(2:6), direction = "long", idvar="preferences_time_data_frame$Courses_Completed", timevar=order)
reshape(preferences_time_data_frame, varying = c(2:6), direction = "long", idvar="preferences_time_data_frame$Courses_Completed",  v.names=c("f", "u", "i","a","d"))
reshape(preferences_time_data_frame, varying = c(2:6), direction = "long", v.names=c("f", "u", "i","a","d"))
melt(preferences_time_data_frame, id.vars="Courses_Completed")
head(preferences_time_data_frame)
melt(preferences_time_data_frame, id.vars="Courses_Completed")
melt(preferences_time_data_frame, id.vars="Courses_Completed", variable.name="language")
help(melt)
melt(preferences_time_data_frame, id.vars="Courses_Completed", variable_name="language")
melt(preferences_time_data_frame, id.vars="Courses_Completed", variable_name="language", na.rm=TRUE)
melted_preferences_time_data_frame <- melt(preferences_time_data_frame, id.vars="Courses_Completed", variable_name="language", na.rm=TRUE)
melt(preferences_time_data_frame, id.vars="Courses_Completed", variable_name="language", na.rm=TRUE)
plot(x_range, y_range, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
colors <- rainbow(ntrees)
colors <- rainbow(melted_preferences_time_data_frame$language)
plot(x_range, y_range, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
colors <- rainbow(melted_preferences_time_data_frame$language)
linetype <- c(1:ntrees)
linetype <- c(1:melted_preferences_time_data_frame$language)
plotchar <- seq(18,18+ntrees,1)
plotchar <- seq(18,18+melted_preferences_time_data_frame$language,1)
plot(x_range, y_range, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
plot(x_range, y_range, type="n", xlab="Courses Completed",
ylab="Preference" )
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ mean(language), value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, value.var = mean("value"))
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, value.var = "avg_ppo2")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, fun.aggregate = TRUE, value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, fun.aggregate = "mean", value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, fun_ggregate = "mean", value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, fun_aggregate = "mean", value.var = "value")
help(dcast)
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, fun.aggregate = "mean", value.var = "value")
dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, mean, value.var = "value")
total_average_preferences <- dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, mean, value.var = "value")
total_average_preferences[-13, ]
total_average_preferences <- total_average_preferences[-13, ]
head(working_survey_input)
preferences_time <- c("Courses_Completed", "Java", "JavaScript", "Python", "R", "SAS")
preferences_time_data_frame <- working_survey_input[,preferences_time]
head(preferences_time_data_frame)
melted_preferences_time_data_frame <- melt(preferences_time_data_frame, id.vars="Courses_Completed", variable_name="language", na.rm=TRUE)
total_average_preferences <- dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, mean, value.var = "value")
total_average_preferences <- total_average_preferences[-13, ]
total_average_preferences
library(matplot)
install.packages("matplot")
library(matplotlib)
install.packages("matplotlib")
help(plot)
melt(total_average_preferences)
melt(total_average_preferences,id.vars="Courses_Completed")
melt_total_average_preferences <- melt(total_average_preferences,id.vars="Courses_Completed")
melt_total_average_preferences <- melt(total_average_preferences,id.vars="Courses_Completed")
plot(melt_total_average_preferences)
plot(melt_total_average_preferences$variable)
melt_total_average_preferences
head(melt_total_average_preferences)
plot(melt_total_average_preferences$value)
head(total_average_preferences)
plot(total_average_preferences$Java,type = "o",col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
plot(total_average_preferences$Java,type = "o",col = "red", xlab = "Courses Completed", ylab = "Preference",
main = "Language Preference by Year")
lines(total_average_preferences$JavaScript, type = "o", col = "blue")
plot(total_average_preferences$Java,type = "o",col = "red", xlab = "Courses Completed", ylab = "Preference",
main = "Language Preference by Year")
lines(total_average_preferences$JavaScript, type = "o", col = "blue")
lines(total_average_preferences$Python, type = "o", col = "blue")
lines(total_average_preferences$R, type = "o", col = "blue")
lines(total_average_preferences$SAS, type = "o", col = "blue")
source('C:/Users/00811289/Desktop/mspa_software_survey_case/assignment_1_ejr_code.R', echo=TRUE)
melt(total_average_preferences,id.vars="Courses_Completed")
help(plot)
elp(max)
help(max)
max(melt_total_average_preferences$value)
y_dim <- c(0,max(melt_total_average_preferences$value))
plot(total_average_preferences$Java,type = "o",col = "red", xlab = "Courses Completed", ylab = "Preference",
main = "Language Preference by Year", ylim=y_dim)
lines(total_average_preferences$JavaScript, type = "o", col = "blue")
lines(total_average_preferences$Python, type = "o", col = "blue")
lines(total_average_preferences$R, type = "o", col = "blue")
lines(total_average_preferences$SAS, type = "o", col = "blue")
melt_total_average_preferences <- melt(total_average_preferences,id.vars="Courses_Completed")
y_dim <- c(0,max(melt_total_average_preferences$value))
plot(total_average_preferences$Java,type = "o",col = HEX_PURPLE, xlab = "Courses Completed", ylab = "Preference",
main = "Language Preference by Year", ylim=y_dim)
lines(total_average_preferences$JavaScript, type = "o", col = HEX_BLUE)
lines(total_average_preferences$Python, type = "o", col = HEX_BLACK)
lines(total_average_preferences$R, type = "o", col = HEX_GREY)
lines(total_average_preferences$SAS, type = "o", col = HEX_RED)
plot(total_average_preferences$Java,type = "o", pch=15, col = HEX_PURPLE, xlab = "Courses Completed", ylab = "Preference",
main = "Language Preference by Year", ylim=y_dim)
plot(total_average_preferences$Java,type = "o", pch=15, col = HEX_PURPLE, xlab = "Courses Completed", ylab = "Preference",
main = "Language Preference by Year", ylim=y_dim)
lines(total_average_preferences$JavaScript, type = "o", pch=15, col = HEX_BLUE)
lines(total_average_preferences$Python, type = "o", pch=15, col = HEX_BLACK)
lines(total_average_preferences$R, type = "o", pch=15, col = HEX_GREY)
lines(total_average_preferences$SAS, type = "o", pch=15, col = HEX_RED)
legend(location="topright", legend=c("woo","ee"))
legend("topright", legend=c("woo","ee"))
legend("topright", legend=c("Java","JavaScript","Python","R","SAS"))
library(googleVis)  # for working with Google Chart Tools APIA
install.packages("googleVis")
# user-defined function to recode states as state abbreviations
# this assumes that both input and output are character strings
# note how we are putting the state abbreviations in alphabetical order
# to ensure that things do not get mixed up if we later convert to factors
# state abbreviations will be used as input to the googleVis package
make.state.abbreviation <- function(x) {
switch(x,
"Alaska" = "AK", "Alabama" = "AL", "Arkansas" = "AR",
"Arizona" = "AZ",  "California" = "CA",
"Colorado" = "CO", "Connecticut" = "CT", "District of Columbia" = "DC",
"Delaware" = "DE", "Florida" = "FL",
"Georgia" =  "GA", "Hawaii" = "HI", "Iowa" = "IA",
"Idaho" = "ID", "Illinois" = "IL", "Indiana" = "IN",
"Kansas" = "KS", "Kentucky" = "KY", "Louisiana" = "LA",
"Massachusetts" = "MA", "Maryland" = "MD", "Maine" = "ME",
"Michigan" = "MI", "Minnesota" = "MN", "Missouri" = "MO",
"Mississippi" = "MS", "Montana" = "MT",
"North Carolina" = "NC", "North Dakota" = "ND",
"Nebraska" = "NE", "New Hampshire" = "NH", "New Jersey" = "NJ",
"New Mexico" = "NM", "Nevada" = "NV", "New York" = "NY",
"Ohio" = "OH", "Oklahoma" = "OK", "Oregon" = "OR",
"Pennsylvania" = "PA",
"Rhode Island" = "RI", "South Carolina" = "SC", "South Dakota" = "SD",
"Tennessee" = "TN", "Texas" = "TX",
"Utah" = "UT",  "Virginia" = "VA", "Vermont" = "VT",
"Washington" = "WA", "Wisconsin" = "WI",
"West Virginia" = "WV", "Wyoming" = "WY", "")
}
my.data.frame <- read.csv("data_sat_scores_2013.csv", header = TRUE)
getwd()
setwd("C:/Users/00811289/Desktop/Assignment_5_googleVis")
my.data.frame <- read.csv("data_sat_scores_2013.csv", header = TRUE)
# character string for state... not factor
my.data.frame$State <- as.character(my.data.frame$State)
my.data.frame$state <- rep("", length = nrow(my.data.frame))
View(my.data.frame)
for(index.for.state in seq(along = my.data.frame$State))
my.data.frame$state[index.for.state] <- make.state.abbreviation(my.data.frame$State[index.for.state])
# check the coding of states
print(my.data.frame[,c("State", "state")])
# create the map object by using googleVis function to
# generate a javascript program for running the choropleth map
javascript.us.map.object <-  gvisGeoChart(my.data.frame, "state", "SAT",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colorAxis = "{values: [1351, 1551, 1807], colors: [\'coral', \'lightgray', \'blue']}",
width=700, height=500))
# set up color gradient color codes and values to be used in the JSON
# as required for the Google API:
#   colorAxis = "{values: [my.value.gradient], colors: [my.color.gradient]}",
# here is the color gradient array for use in the ggplot2 choropleth map
# my.color.gradient <- c(hex(HLS(12,0.5,0.9)), hex("gray90"), hex(HLS(253,0.5,0.9)))
# we will will use three corresponding Web colors: coral, lightgray, and blue
# which we will enter into JSON format for colors
# these colors in the gradient are set to correspond to the min, median, and max
# values of the state data to be displayed in the choropleth map
my.value.gradient <- c(min(my.data.frame$SAT),
median(my.data.frame$SAT),
max(my.data.frame$SAT))
print(my.value.gradient)  # 1351 1551 1807 to be entered into JSON format
# create the map object by using googleVis function to
# generate a javascript program for running the choropleth map
javascript.us.map.object <-  gvisGeoChart(my.data.frame, "state", "SAT",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colorAxis = "{values: [1351, 1551, 1807], colors: [\'coral', \'lightgray', \'blue']}",
width=700, height=500))
?gvisGeoChart
??gvisGeoChart
library(googleVis)  # for working with Google Chart Tools APIA
# create the map object by using googleVis function to
# generate a javascript program for running the choropleth map
javascript.us.map.object <-  gvisGeoChart(my.data.frame, "state", "SAT",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colorAxis = "{values: [1351, 1551, 1807], colors: [\'coral', \'lightgray', \'blue']}",
width=700, height=500))
# using plot on a gvis list object sends the program to the default browser application
plot(javascript.us.map.object)  # plots in a new browser window
my.data.frame <- read.csv("crimedata2017.csv", header = TRUE)
crimedata <- read.csv("crimedata2017.csv", header = TRUE)
View(crimedata)
summary(crimedata)
offense == "THEFT F/AUTO" |
offense == "MOTOR VEHICLE THEFT" |
offense == "ROBBERY" |
offense == "ASSAULT W/DANGEROUS WEAPON" |
offense == "BURGLARY" |))
crimedata_top5 <- subset(crimedata, (offense == "THEFT/OTHER" |
offense == "THEFT F/AUTO" |
offense == "MOTOR VEHICLE THEFT" |
offense == "ROBBERY" |
offense == "ASSAULT W/DANGEROUS WEAPON" |
offense == "BURGLARY" ))
crimedata_top5 <- subset(crimedata, (OFFENSE == "THEFT/OTHER" |
OFFENSE == "THEFT F/AUTO" |
OFFENSE == "MOTOR VEHICLE THEFT" |
OFFENSE == "ROBBERY" |
OFFENSE == "ASSAULT W/DANGEROUS WEAPON" |
OFFENSE == "BURGLARY" ))
View(crimedata_top5)
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
library(plyr)
library(ggplot2)
library(extrafont)
library(rworldmap)
library(googleVis)
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
library(ggmap)
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE), color=HEX_MENTHOL, data = plot_yrs, alpha = .05) +
scale_x_continuous(limits = c(-124.85,-65), expand = c(0, 0)) +
scale_y_continuous(limits = c(23,49.39), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE), color="blue", data = plot_yrs, alpha = .05) +
scale_x_continuous(limits = c(-124.85,-65), expand = c(0, 0)) +
scale_y_continuous(limits = c(23,49.39), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE), color="blue", data = crimedata_top5, alpha = .05) +
scale_x_continuous(limits = c(-124.85,-65), expand = c(0, 0)) +
scale_y_continuous(limits = c(23,49.39), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPointsFacets <- mapPoints +   facet_grid(. ~ storm_year)
# plot the map
mapPointsFacets
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE), color="blue", data = crimedata_top5, alpha = .05) +
scale_x_continuous(limits = c(38.81,-77), expand = c(0, 0)) +
scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPointsFacets <- mapPoints +   facet_grid(. ~ storm_year)
# plot the map
mapPointsFacets
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE), color="blue", data = crimedata_top5, alpha = .05) +
scale_x_continuous(limits = c(38.81,-77), expand = c(0, 0)) +
scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPointsFacets <- mapPoints +   facet_grid(. ~ OFFENSE)
# plot the map
mapPointsFacets
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE), color="blue", data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(38.81,-77), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPointsFacets <- mapPoints +   facet_grid(. ~ OFFENSE)
# plot the map
mapPointsFacets
map <- get_map(location = c(38.81,-77,39,-76.91), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(38.81,-77), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
summary(crimedata)
map <- get_map(location = c(-77,38,-76.91,39), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(38.81,-77), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77,38.75,-76.91,39), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(38.81,-77), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77,38.75,-76.91,39), zoom = 5, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77,38.75,-76.91,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
#mapPointsFacets <- mapPoints +   facet_grid(. ~ OFFENSE)
# plot the map
mapPointsFacets
map <- get_map(location = c(-77.5,38.75,-76.91,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.75,-76.91,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.91,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.20,38.80,-76.91,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.85,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("Storm Locations Over Time") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("DC Crime Map") +
theme(legend.position="none")
mapPoints
map
ggmap(map)
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1)
ggmap(map)
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("DC Crime Map") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("DC Crime Map") +
theme(legend.position="none")
mapPoints
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("DC Crime Map") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("DC Crime Map") +
theme(legend.position="none")
mapPoints
map <- get_map(location = c(-124.85,24.39,-66.88,49.39), zoom = 2)
mapPoints <- ggmap(map) + geom_point(aes(x = LONGITUDE, y = LATITUDE, color=storm_year), data = locations, alpha = .2) +
scale_x_continuous(limits = c(-124.85,-50), expand = c(0, 0)) +
scale_y_continuous(limits = c(15,49.39), expand = c(0, 0))
mapPoints
map <- get_map(location = c(-77.15,38.80,-76.90,39), zoom = 1, maptype="toner-lines")
mapPoints <- ggmap(map) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, color=OFFENSE), data = crimedata_top5, alpha = .05) +
#scale_x_continuous(limits = c(-77,38,-76.91), expand = c(0, 0)) +
#scale_y_continuous(limits = c(39,-76.91), expand = c(0, 0)) +
ggtitle("DC Crime Map") +
theme(legend.position="none")
mapPoints
