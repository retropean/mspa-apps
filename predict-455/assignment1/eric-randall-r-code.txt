# Jump-Start Example: R analysis of MSPA Software Survey

# shows how to read in data from a comma-delimited text file
# manipuate data, create new count variables, define factor variables,
# work with a hash table for recoding data 

# visualizations in this program are routed to external pdf files
# so they may be included in printed or electronic reports

# external libraries for visualizations and data manipulation
# ensure that these have been installed prior to calls
library(lattice) 
library(ggplot2)
library(matplotlib)
library(reshape2)
# set up hash fuctions similar to Python dictionary data structure
library(hash)  

# user-defined function useful for data visualization
# helps with review of correlation matrices
source("C:/Users/00811289/Desktop/mspa_software_survey_case/code_correlation_heat_map.R")

# set color constants for visualizations
HEX_BLUE <- "#3953A4"  
HEX_PURPLE <- "#4E2A84" 
HEX_RED <- "#EE3166"  
HEX_WHITE <- "#FFFFFF"  
HEX_GREY <- "#C2C2D6"  
HEX_BLACK <- "#000000"
HEX_GREEN <- "#006400"

valid_survey_input <- 
    read.csv(file = "C:/Users/00811289/Desktop/mspa_software_survey_case/mspa_survey_data.csv", 
    stringsAsFactors = FALSE)

# Correlation of relationships of programming languages
cat("\nNumber of Respondents =", nrow(valid_survey_input))
        cormat <- cor(valid_survey_input[, 2:16])
short_var_names <- c("My_Java", "My_JavaSript", "My_Python", "My_R", "My_SAS",
    "Prof_Java", "Prof_JavaSript", "Prof_Python", "Prof_R", "Prof_SAS",
    "Ind_Java", "Ind_JavaSript", "Ind_Python", "Ind_R", "Ind_SAS")
rownames(cormat) <- short_var_names
colnames(cormat) <- short_var_names
correlation_heat_map(cormat, order_variable = NULL, title = "Correlations for Original Computer Language Items")

# Checking to see if these relationships change over time in the program. Not really.
newstudents <- valid_survey_input[which(valid_survey_input$Courses_Completed <6 ),]
cormat <- cor(newstudents[, 2:16])
rownames(cormat) <- short_var_names
colnames(cormat) <- short_var_names
correlation_heat_map(cormat, order_variable = NULL, title = "New Students: Correlations for Original Computer Language Items")

veteranstudents <- valid_survey_input[ which(valid_survey_input$Courses_Completed >=6 ), ]
cormat <- cor(veteranstudents[, 2:16])
rownames(cormat) <- short_var_names
colnames(cormat) <- short_var_names
correlation_heat_map(cormat, order_variable = NULL, title = "Veteran Students: Correlations for Original Computer Language Items")

# define new variables for working data frame
# language preferences computed as averages 
# for one individual at a time
Java <- JavaScript <- Python <- R <- SAS <- numeric(nrow(valid_survey_input))

for (i in seq(along = valid_survey_input$Personal_JavaScalaSpark)) {
    Java[i] <- mean(valid_survey_input$Personal_JavaScalaSpark[i],
        valid_survey_input$Professional_JavaScalaSpark[i], valid_survey_input$Industry_JavaScalaSpark[i])
    JavaScript[i] <- mean(valid_survey_input$Personal_JavaScriptHTMLCSS[i],
        valid_survey_input$Professional_JavaScriptHTMLCSS[i], valid_survey_input$Industry_JavaScriptHTMLCSS[i])   
    Python[i] <- mean(valid_survey_input$Personal_Python[i],
        valid_survey_input$Professional_Python[i], valid_survey_input$Industry_Python[i])     
    R[i] <- mean(valid_survey_input$Personal_R[i],
        valid_survey_input$Professional_R[i], valid_survey_input$Industry_R[i])     
    SAS[i] <- mean(valid_survey_input$Personal_SAS[i],
        valid_survey_input$Professional_SAS[i], valid_survey_input$Industry_SAS[i])       
    } # end of for-loop for creating preference variables    

# create new data frame with the summary language variables    
working_survey_input <- data.frame(Java, JavaScript, Python, R, SAS)  

# add Courses_Completed to the working data frame
working_survey_input$Courses_Completed <- valid_survey_input$Courses_Completed

# let nonresponse on sliders be zero interest
# and create interest variables for use in the new data frame
working_survey_input$Python_Course_Interest <- 
    ifelse(is.na(valid_survey_input$Python_Course_Interest), 0,
        valid_survey_input$Python_Course_Interest) 
        
working_survey_input$Foundations_DE_Course_Interest <- 
    ifelse(is.na(valid_survey_input$Foundations_DE_Course_Interest), 0,
        valid_survey_input$Foundations_DE_Course_Interest) 
        
working_survey_input$Analytics_App_Course_Interest <- 
    ifelse(is.na(valid_survey_input$Analytics_App_Course_Interest), 0,
        valid_survey_input$Analytics_App_Course_Interest)         
        
working_survey_input$Systems_Analysis_Course_Interest <- 
    ifelse(is.na(valid_survey_input$Systems_Analysis_Course_Interest), 0,
        valid_survey_input$Systems_Analysis_Course_Interest)
        
# software count variables to add to the data frame
working_survey_input$Python_Courses <- numeric(nrow(working_survey_input))
working_survey_input$R_Courses <- numeric(nrow(working_survey_input))
working_survey_input$SAS_Courses <- numeric(nrow(working_survey_input))
for (istudent in seq(along = working_survey_input$Python_Courses)) {

    if (valid_survey_input$PREDICT400[istudent] != "")
        working_survey_input$Python_Courses[istudent] <-
            working_survey_input$Python_Courses[istudent] + 1
    if (valid_survey_input$PREDICT420[istudent] != "")
        working_survey_input$Python_Courses[istudent] <-
            working_survey_input$Python_Courses[istudent] + 1
    if (valid_survey_input$PREDICT452[istudent] != "")
        working_survey_input$Python_Courses[istudent] <-
            working_survey_input$Python_Courses[istudent] + 1
    if (valid_survey_input$PREDICT453[istudent] != "")
        working_survey_input$Python_Courses[istudent] <-
            working_survey_input$Python_Courses[istudent] + 1
            
    if (valid_survey_input$PREDICT401[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1
    if (valid_survey_input$PREDICT413[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1
    if (valid_survey_input$PREDICT450[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1        
    if (valid_survey_input$PREDICT451[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1        
    if (valid_survey_input$PREDICT454[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1        
    if (valid_survey_input$PREDICT455[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1        
    if (valid_survey_input$PREDICT456[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1        
    if (valid_survey_input$PREDICT457[istudent] != "")
        working_survey_input$R_Courses[istudent] <-
            working_survey_input$R_Courses[istudent] + 1 

    if (valid_survey_input$PREDICT410[istudent] != "")
        working_survey_input$SAS_Courses[istudent] <-
            working_survey_input$SAS_Courses[istudent] + 1
    if (valid_survey_input$PREDICT411[istudent] != "")
        working_survey_input$SAS_Courses[istudent] <-
            working_survey_input$SAS_Courses[istudent] + 1

    }        

# bar chart for number of SAS courses taken
ggplot_object <- ggplot(data = working_survey_input,
  aes(x = SAS_Courses)) +
  geom_bar(fill = HEX_BLUE, colour = HEX_BLUE) +
  ggtitle("Bar Chart for Number of SAS Courses Taken\n") +
  xlab("\nNumber of SAS Courses Taken") +
  ylab("Number of Students") 
print(ggplot_object)


# hash table for computing terms to graduate from graduation dates
# works like an Excel lookup table, Perl hash, or Python dictionary
mykeys <- c("Fall 2016", "Winter 2017", "Spring 2017", "Summer 2017",
    "Fall 2017", "Winter 2018", "Spring 2018", "Summer 2018", "Fall 2018",
    "Winter 2019", "Spring 2019", "Summer 2019", "Fall 2019",  "Winter 2017",
    "2020 or Later")
myvalues <- 0:(length(mykeys) - 1)
# create the hash table object (similar to dictionary in python)
mydate_dict <- hash(keys = mykeys, values = myvalues)
working_survey_input$Graduate_Date <- valid_survey_input$Graduate_Date
working_survey_input$Terms_to_Graduate <- numeric(nrow(working_survey_input))

# determine the new values for number of terms to graduation by hash by looking at location in mykeys
for (item in seq(along = working_survey_input$Graduate_Date)) {
    if (working_survey_input$Graduate_Date[item] == "")
        working_survey_input$Terms_to_Graduate[item] <- NA

    if (working_survey_input$Graduate_Date[item] != "")
        working_survey_input$Terms_to_Graduate[item] <-
            values(mydate_dict, keys = working_survey_input$Graduate_Date[item])   
    }

# examine the structure of the working_survey_data so far
print(str(working_survey_input))

# use R standard graphics to make a scatter plot
# jittered with open-circle points to avoid overplotting issue
with(working_survey_input, 
    plot(jitter(Courses_Completed), jitter(Terms_to_Graduate), 
        las = 1,
        xlab = "Number of Courses Completed",
        ylab = "Expected Number of Terms Before Graduation"))

# use R lattice package to create histogram for groups defined by
# the number of SAS courses taken

# it is often useful to set up a data frame just for plotting
plotting_data_frame <- 
    working_survey_input[, c("Terms_to_Graduate", "SAS_Courses")]
plotting_data_frame$SAS_Courses <- 
    factor(plotting_data_frame$SAS_Courses,
        levels = c(0, 1, 2), 
        labels = c("No SAS Courses", "PREDICT 410 Only", "PREDICT 410/411"))
    
# set up function for lattice panels for up to five groups
# use special colors for the panel rectangles and text for group labels
myStripRectColorsGrey <- c(HEX_GREY, HEX_GREY, HEX_GREY, HEX_GREY, HEX_GREY)
myStripTextColorsBlack <- c(HEX_BLACK, HEX_BLACK, HEX_BLACK, HEX_BLACK, HEX_GREY)

myStripStyleGreyBlack <- function(which.panel, factor.levels, ...) {
    panel.rect(0, 0, 1, 1, border = 1, 
        col = myStripRectColorsGrey[which.panel])
    panel.text(x = 0.5, y = 0.5, 
        col = myStripTextColorsBlack[which.panel],
        lab = paste(factor.levels[which.panel]))
    }

lattice_plot_object <- histogram(~Terms_to_Graduate | SAS_Courses, 
    data = plotting_data_frame,             
    strip = myStripStyleGreyBlack,
    col = "darkblue", border = "lightgrey",
    type = "percent", xlab = "Expected Number of Terms Before Graduation",
    ylab = "Percentage of Students in Group",
    breaks = 0:14,
    layout = c(1,3),
    main = "Expected Number of Terms Before Graduation for SAS Groups")
print(lattice_plot_object)

# Check mean completion rate
mean(working_survey_input$Courses_Completed,na.rm=TRUE)

# Make elective bar plot
elective_courses <- c("PREDICT450", "PREDICT451", "PREDICT452", "PREDICT453", "PREDICT454", "PREDICT455", "PREDICT456", "PREDICT457")
elective_data_frame <- valid_survey_input[,elective_courses]

elective_data_frame$PREDICT450_count<-as.integer(1)
elective_data_frame$PREDICT450_count[elective_data_frame$PREDICT450==""]<-as.integer(0)
elective_data_frame$PREDICT451_count<-as.integer(1)
elective_data_frame$PREDICT451_count[elective_data_frame$PREDICT451==""]<-as.integer(0)
elective_data_frame$PREDICT452_count<-as.integer(1)
elective_data_frame$PREDICT452_count[elective_data_frame$PREDICT452==""]<-as.integer(0)
elective_data_frame$PREDICT453_count<-as.integer(1)
elective_data_frame$PREDICT453_count[elective_data_frame$PREDICT453==""]<-as.integer(0)
elective_data_frame$PREDICT454_count<-as.integer(1)
elective_data_frame$PREDICT454_count[elective_data_frame$PREDICT454==""]<-as.integer(0)
elective_data_frame$PREDICT455_count<-as.integer(1)
elective_data_frame$PREDICT455_count[elective_data_frame$PREDICT455==""]<-as.integer(0)
elective_data_frame$PREDICT456_count<-as.integer(1)
elective_data_frame$PREDICT456_count[elective_data_frame$PREDICT456==""]<-as.integer(0)
elective_data_frame$PREDICT457_count<-as.integer(1)
elective_data_frame$PREDICT457_count[elective_data_frame$PREDICT457==""]<-as.integer(0)

elective_data_frame <- elective_data_frame[,-c(seq(1,8))] 
colnames(elective_data_frame) <- elective_courses
head(elective_data_frame)

barplot(colSums(elective_data_frame), col=HEX_PURPLE, cex.names=.75, main="Elective Courses")

# Show which new courses are preferred
new_courses <- c("Python_Course_Interest", "Foundations_DE_Course_Interest", "Analytics_App_Course_Interest", "Systems_Analysis_Course_Interest")
new_courses_data_frame <- working_survey_input[,new_courses]
head(new_courses_data_frame)
colnames(new_courses_data_frame) <- c("Python", "Foundations", "Analytics App", "Systems Analysis")
barplot(colSums(new_courses_data_frame, na.rm=TRUE), col=HEX_PURPLE, cex.names=.75, main="New Course Preferences", ylim=c(0,20000))

# Chart of Language Preference by time in program
preferences_time <- c("Courses_Completed", "Java", "JavaScript", "Python", "R", "SAS")
preferences_time_data_frame <- working_survey_input[,preferences_time]
head(preferences_time_data_frame)
melted_preferences_time_data_frame <- melt(preferences_time_data_frame, id.vars="Courses_Completed", variable_name="language", na.rm=TRUE)
total_average_preferences <- dcast(melted_preferences_time_data_frame, Courses_Completed ~ language, mean, value.var = "value")
total_average_preferences <- total_average_preferences[-13, ]
total_average_preferences
head(total_average_preferences)

melt_total_average_preferences <- melt(total_average_preferences,id.vars="Courses_Completed")
y_dim <- c(0,max(melt_total_average_preferences$value))

# Plot using plot()
plot(total_average_preferences$Java,type = "o", pch=15, col = HEX_PURPLE, xlab = "Courses Completed", ylab = "Preference", 
     main = "Language Preference by Year", ylim=y_dim)
lines(total_average_preferences$JavaScript, type = "o", pch=15, col = HEX_BLUE)
lines(total_average_preferences$Python, type = "o", pch=15, col = HEX_BLACK)
lines(total_average_preferences$R, type = "o", pch=15, col = HEX_GREY)
lines(total_average_preferences$SAS, type = "o", pch=15, col = HEX_RED)
legend("topright", legend=c("Java","JavaScript","Python","R","SAS"), col = c(HEX_PURPLE, HEX_BLUE, HEX_BLACK, HEX_GREY, HEX_RED), pch = 15)

# Plot using ggplot2
ggplot(data=melt_total_average_preferences, aes(x=Courses_Completed, y=value, group=variable)) +
  geom_line(aes(color = variable)) + 
  geom_point(aes(color = variable)) + 
  theme(legend.position = "bottom") +
  scale_color_manual(values = c(HEX_BLUE, HEX_PURPLE, HEX_RED, HEX_GREEN, HEX_GREY, HEX_BLACK)) +
  ggtitle("Sentiment of Language over Courses Taken") +
  labs(x = "Courses Completed", y = "Sentiment") +
  scale_x_continuous(breaks = c(2,4,6,8,10,12))


plotting_data_frame$SAS_Courses <- 
  factor(plotting_data_frame$SAS_Courses,
         levels = c(0, 1, 2), 
         labels = c("No SAS Courses", "PREDICT 410 Only", "PREDICT 410/411"))

popular_electives <- histogram(~Terms_to_Graduate | SAS_Courses, 
                                 data = plotting_data_frame,             
                                 strip = myStripStyleGreyBlack,
                                 col = "darkblue", border = "lightgrey",
                                 type = "percent", xlab = "Electives by Completion",
                                 ylab = "Percentage of Students in Group",
                                 breaks = 0:14,
                                 layout = c(1,3),
                                 main = "Expected Number of Terms Before Graduation for SAS Groups")
print(lattice_plot_object)