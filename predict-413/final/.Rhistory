days.highlight <- train$DOW[1]+train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1]
days.highlight <- train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1,6]
days.highlight <- train$DOW[1&6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# which days do we want to highlight?
days.highlight <- train$DOW[1+6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
View(train)
View(train)
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(
axis.text.x = element_blank(),
axis.text.y = element_blank())
graph + theme(
axis.ticks = element_blank())
graph + scale_y_continuous(breaks=seq(0,40,5))
graph + scale_y_continuous(breaks=seq(0,40,14))
graph + scale_y_continuous(breaks=seq(0,365,14))
graph + scale_x_continuous(breaks=seq(0,365,14))
graph + theme(
axis.text.y = element_blank())
graph + theme(
axis.text.x = element_blank())
graph + theme(
axis.text.x = element_blank(),axis.ticks.x = element_blank())
graph + scale_x_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_y_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_x_date(date_minor_breaks = "1 day")
library(scales)
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(breaks = date_breaks(width = "3 dats"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%m%e%y"))
graph + scale_x_date(breaks = date_breaks(width = "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks" labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%D")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%d")
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%D"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%B")
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
train$test<- format(train$Date,%d)
train$test<- format(train$Date,"%d")
train$test<- format(train$Date,format="%d")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
train <- read.csv("C:/Users/00811289/Desktop/peakoffpeak.csv")
library(ggplot2)
library(scales)
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%d"))
train$datefix<- format(train$Date,format="%d")
train$datefixdos <- as.Date(train$datefix, "%m/%d/%Y")
graph<- ggplot(train, aes(x = datefixdos, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph+ theme(
+   axis.text = element_blank())
graph + theme(axis.text = element_blank())
graph + theme(axis.label = element_blank())
graph + theme(axis.text.y = element_blank())
graph + theme(axis= element_blank())
graph + theme(axis.ticks.y = element_blank())
train$IndexDate <- as.Date(train$datefix, "%m/%d/%Y")
train$Riders<-train$Total
graph<- ggplot(train, aes(x = IndexDate, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
graph<- ggplot(train, aes(x = IndexDate, y = Riders, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
help(numeric)
library(fBasics)
library(fGarch)
library(MTS)
library(quantmod)
library(rmgarch)
library(rugarch)
library(car)
library(FinTS)
library(PerformanceAnalytics)
source("inc/covEWMA.r")
setwd("C:/Users/00811289/Desktop/413/final")
source("inc/covEWMA.r")
install.packages(c("FinTS", "rmgarch", "rugarch"))
install.packages("MTS")
MSFT <- read.table("inc/MSFT.csv",header=TRUE,sep=",")
INTC <- read.table("inc/INTC.csv",header=TRUE,sep=",")
colnames(MSFT)
head(MSFT)
tail(MSFT)
# convert to time series, extract adjusted closing prices
MSFTts <- xts(MSFT$Adj.Close, as.Date(MSFT$Date, format='%Y-%m-%d'))
INTCts <- xts(INTC$Adj.Close, as.Date(INTC$Date, format='%Y-%m-%d'))
head(MSFTts)
head(INTCts)
# plot prices
plot(MSFTts, main='Daily Adjusted Closing Prices for Microsoft')
plot(INTCts, main='Daily Adjusted Closing Prices for Intel')
# calculate log-returns for GARCH analysis
MSFT.ret <- CalculateReturns(MSFTts, method="log")
INTC.ret <- CalculateReturns(INTCts, method="log")
# remove first NA observation
MSFT.ret <- MSFT.ret[-1,]
INTC.ret <- INTC.ret[-1,]
colnames(MSFT.ret) <- "MSFT"
colnames(INTC.ret) <- "INTC"
# create combined data series
returnIM <- merge(MSFT.ret,INTC.ret)
head(returnIM)
head(MSFT.ret)
# plot returns
plot(MSFT.ret)
plot(INTC.ret)
plot(coredata(INTC.ret), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
abline(h=0,v=0)
basicStats(MSFT.ret)
basicStats(INTC.ret)
t.test(MSFT.ret)
t.test(INTC.ret)
d1=density(rtn$nflx)
d2=density(rtn$sprtrn)
par(mfcol=c(1,2))
t.test(rtnb$ge)
mm3 <- skewness(MSFT.ret)/sqrt(6/length(MSFT.ret))
mm3
im3 <- skewness(INTC.ret)/sqrt(6/length(INTC.ret))
im3
#graph Densities for Skewness
d3=density(MSFT.ret)
plot(d3$x,d3$y,xlab='returns',ylab='density',main='MSFT',type='l')
d3=density(INTC.ret)
plot(d3$x,d3$y,xlab='returns',ylab='density',main='INTC',type='l')
kurtosis(MSFT.ret)
tk=kurtosis(MSFT.ret)/sqrt(24/length(MSFT.ret))
tk
kurtosis(INTC.ret)
tk=kurtosis(INTC.ret)/sqrt(24/length(INTC.ret))
tk
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
# convert to time series, extract adjusted closing prices
MSFTts <- xts(MSFT$Adj.Close, as.Date(MSFT$Date, format='%Y-%m-%d'))
INTCts <- xts(INTC$Adj.Close, as.Date(INTC$Date, format='%Y-%m-%d'))
head(MSFTts)
head(INTCts)
# plot prices
plot(MSFTts, main='Daily Adjusted Closing Prices for Microsoft')
plot(INTCts, main='Daily Adjusted Closing Prices for Intel')
# calculate log-returns for GARCH analysis
MSFT.ret <- CalculateReturns(MSFTts, method="log")
INTC.ret <- CalculateReturns(INTCts, method="log")
# remove first NA observation
MSFT.ret <- MSFT.ret[-1,]
INTC.ret <- INTC.ret[-1,]
colnames(MSFT.ret) <- "MSFT"
colnames(INTC.ret) <- "INTC"
# create combined data series
returnIM <- merge(MSFT.ret,INTC.ret)
head(returnIM)
head(MSFT.ret)
# plot returns
plot(MSFT.ret)
plot(INTC.ret)
plot(coredata(INTC.ret), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
abline(h=0,v=0)
basicStats(MSFT.ret)
basicStats(INTC.ret)
t.test(MSFT.ret)
t.test(INTC.ret)
d1=density(rtn$nflx)
d2=density(rtn$sprtrn)
par(mfcol=c(1,2))
t.test(rtnb$ge)
mm3 <- skewness(MSFT.ret)/sqrt(6/length(MSFT.ret))
mm3
im3 <- skewness(INTC.ret)/sqrt(6/length(INTC.ret))
im3
#graph Densities for Skewness
d3=density(MSFT.ret)
plot(d3$x,d3$y,xlab='returns',ylab='density',main='MSFT',type='l')
d3=density(INTC.ret)
plot(d3$x,d3$y,xlab='returns',ylab='density',main='INTC',type='l')
kurtosis(MSFT.ret)
tk=kurtosis(MSFT.ret)/sqrt(24/length(MSFT.ret))
tk
kurtosis(INTC.ret)
tk=kurtosis(INTC.ret)/sqrt(24/length(INTC.ret))
tk
library(PerformanceAnalytics)
MSFTts <- xts(MSFT$Adj.Close, as.Date(MSFT$Date, format='%Y-%m-%d'))
INTCts <- xts(INTC$Adj.Close, as.Date(INTC$Date, format='%Y-%m-%d'))
head(MSFTts)
head(INTCts)
plot(MSFTts, main='Daily Adjusted Closing Prices for Microsoft')
plot(INTCts, main='Daily Adjusted Closing Prices for Intel')
MSFT.ret <- CalculateReturns(MSFTts, method="log")
INTC.ret <- CalculateReturns(INTCts, method="log")
MSFT.ret <- MSFT.ret[-1,]
INTC.ret <- INTC.ret[-1,]
colnames(MSFT.ret) <- "MSFT"
colnames(INTC.ret) <- "INTC"
plot(MSFTts, main='Closing Prices, MSFT')
plot(INTCts, main='Closing Prices, INTC')
# calculate log-returns for GARCH analysis
MSFT.ret <- CalculateReturns(MSFTts, method="log")
INTC.ret <- CalculateReturns(INTCts, method="log")
# remove first NA observation
MSFT.ret <- MSFT.ret[-1,]
INTC.ret <- INTC.ret[-1,]
colnames(MSFT.ret) <- "MSFT"
colnames(INTC.ret) <- "INTC"
# create combined data series
returnIM <- merge(MSFT.ret,INTC.ret)
head(returnIM)
head(MSFT.ret)
# plot returns
plot(MSFT.ret)
plot(INTC.ret)
plot(coredata(INTC.ret), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
abline(h=0,v=0)
basicStats(MSFT.ret)
basicStats(INTC.ret)
t.test(MSFT.ret)
t.test(INTC.ret)
d1=density(rtn$nflx)
d2=density(rtn$sprtrn)
par(mfcol=c(1,2))
t.test(rtnb$ge)
mm3 <- skewness(MSFT.ret)/sqrt(6/length(MSFT.ret))
mm3
im3 <- skewness(INTC.ret)/sqrt(6/length(INTC.ret))
im3
#graph Densities for Skewness
d3=density(MSFT.ret)
plot(d3$x,d3$y,xlab='returns',ylab='density',main='MSFT',type='l')
d3=density(INTC.ret)
plot(d3$x,d3$y,xlab='returns',ylab='density',main='INTC',type='l')
kurtosis(MSFT.ret)
tk=kurtosis(MSFT.ret)/sqrt(24/length(MSFT.ret))
tk
kurtosis(INTC.ret)
tk=kurtosis(INTC.ret)/sqrt(24/length(INTC.ret))
tk
acf(MSFT.ret)
acf(INTC.ret)
pacf(MSFT.ret)
pacf(INTC.ret)
acf(MSFT.ret)
acf(INTC.ret)
Box.test(INTC.ret, lag = 10, type = "Ljung")
Box.test(MSFT, lag = 10, type = "Ljung")
Box.test(MSFT.ret, lag = 10, type = "Ljung")
t.test(MSFT.ret)
t.test(INTC.ret)
Box.test(INTC.ret, type = "Ljung")
Box.test(MSFT.ret, type = "Ljung")
m1 <- arima(MSFT.ret, order=c(6,0,0))
m1
tsdiag(m1)
m1 <- arima(MSFT.ret, order=c(6,0,6))
m1
m1 <- arima(MSFT.ret, order=c(6,1,0))
m1
m1 <- arima(MSFT.ret, order=c(6,0,0))
m1
tsdiag(m1)
m3 <- garchFit(~arma(0,2)+garch(1,1),data=MSFT.ret,trace=F)
m3 <- garchFit(~arma(0,2)+garch(1,1),data=MSFT.ret,trace=F)
summary(m3)
m3 <- garchFit(~arma(0,1)+garch(1,1),data=MSFT.ret,trace=F)
summary(m3)
m4 <- garchFit(~arma(0,1)+garch(1,1),data=MSFT.ret,trace=F,cond.dist="std")
summary(m4)
m4 <- garchFit(~arma(1,1)+garch(1,1),data=MSFT.ret,trace=F,cond.dist="std")
summary(m4)
m3 <- garchFit(~arma(0,6)+garch(1,1),data=MSFT.ret,trace=F)
summary(m3)
msft_m3 <- garchFit(~arma(0,6)+garch(1,1),data=MSFT.ret,trace=F)
summary(msft_m3)
msft_m3 <- garchFit(~arma(6,0)+garch(1,1),data=MSFT.ret,trace=F)
summary(msft_m3)
msft_m3 <- garchFit(~arma(0,1)+garch(1,1),data=MSFT.ret,trace=F)
summary(msft_m3)
msft_m3 <- garchFit(~arma(0,6)+garch(1,1),data=MSFT.ret,trace=F)
summary(msft_m3)
plot(msft_m3)
plot(msft_m3)
intc_m3 <- garchFit(~arma(0,1)+garch(1,1),data=INTC.ret,trace=F)
summary(intc_m3)
plot(intc_m3)
msft_m4 <- garchFit(~arma(1,1)+garch(1,1),data=MSFT.ret,trace=F,cond.dist="std")
summary(msft_m4)
plot(msft_m4)
intc_m4 <- garchFit(~arma(1,1)+garch(1,1),data=INTC.ret,trace=F,cond.dist="std")
0
intc_m4 <- garchFit(~arma(1,1)+garch(1,1),data=INTC.ret,trace=F,cond.dist="std")
intc_m4 <- garchFit(~arma(0,1)+garch(1,1),data=INTC.ret,trace=F,cond.dist="std")
summary(intc_m4)
plot(intc_m4)
head(returnIM)
plot( coredata(intc_m4), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
abline(h=0,v=0)
plot( coredata(intc_m4), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
plot( coredata(intc_ret), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
plot( coredata(intc.ret), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
plot( coredata(INTC.ret), coredata(MSFT.ret), xlab="INTC", ylab="MSFT",
type="p", pch=16, lwd=2, col="gray48", main='Returns Scatterplot')
abline(h=0,v=0)
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab=" ",col="#084594")
lines(returnIM$INTC,col="#6BAED6")
legend(-3.5,-.06,legend=c("Foreign and International Investors","Federal Reserve Banks"),lty=c(1,1), lwd=c(2.5,2.5),col=c("#084594","#6BAED6"))
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab=" ",col="#084594")
lines(returnIM$INTC,col="#6BAED6")
legend(-3.5,-.06,legend=c("Foreign and International Investors","Federal Reserve Banks"),lty=c(1,1), lwd=c(2.5,2.5),col=c("#084594","#6BAED6"))
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab=" ",col="#084594")
lines(returnIM$INTC,col="#6BAED6")
legend(-3.5,-.06,legend=c("Foreign and International Investors","Federal Reserve Banks"),lty=c(1,1), lwd=c(2.5,2.5),col=c("#084594","#6BAED6"))
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab="hello",col="#084594")
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab="")
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab="",col="blue")
lines(returnIM$INTC,col="#6BAED6")
legend(-3.5,-.06,legend=c("Foreign and International Investors","Federal Reserve Banks"),lty=c(1,1), lwd=c(2.5,2.5),col=c("#084594","#6BAED6"))
plot(returnIM$MSFT, main="Log Returns", type="l", xlab="Year", ylab="", col="blue")
lines(returnIM$INTC,col="#6BAED6")
legend(-3.5,-.06,legend=c("Foreign and International Investors","Federal Reserve Banks"),lty=c(1,1), lwd=c(2.5,2.5),col=c("#084594","#6BAED6"))
ccm(returnIM,5)
source("inc/covEWMA.r")
source("inc/ccm.R")
source("inc/mq.R")
source("inc/VARchi.R")
source("inc/VAR.R")
ccm(returnIM,5)
ccm(returnIM,10)
chart.RollingCorrelation(returnIM$MSFT, returnIM$INTC, width=20)
chart.RollingCorrelation(returnIM$MSFT, returnIM$INTC, width=30)
cor.fun = function(x){
cor(x)[1,2]
}
cov.fun = function(x){
cov(x)[1,2]
}
roll.cov <- rollapply(as.zoo(returnIM), FUN=cov.fun, width=20,
by.column=FALSE, align="right")
roll.cor <- rollapply(as.zoo(returnIM), FUN=cor.fun, width=20,
by.column=FALSE, align="right")
par(mfrow=c(2,1))
plot(roll.cov, main="20-day rolling covariances",
ylab="covariance", lwd=2, col="blue")
grid()
abline(h=cov(MSFT.GSPC.ret)[1,2], lwd=2, col="red")
abline(h=cov(returnIM)[1,2], lwd=2, col="red")
plot(roll.cor, main="20-day rolling correlations",
ylab="correlation", lwd=2, col="blue")
grid()
abline(h=cor(returnIM)[1,2], lwd=2, col="red")
par(mfrow=c(1,1))
garch11.spec = ugarchspec(mean.model = list(armaOrder = c(0,0)),
variance.model = list(garchOrder = c(1,1),
model = "sGARCH"),
distribution.model = "norm")
garch11.spec = ugarchspec(mean.model = list(armaOrder = c(0,0)),
variance.model = list(garchOrder = c(1,1),
model = "sGARCH"),
distribution.model = "norm")
library(rmgarch)
garch11.spec = ugarchspec(mean.model = list(armaOrder = c(0,0)),
variance.model = list(garchOrder = c(1,1),
model = "sGARCH"),
distribution.model = "norm")
dcc.garch11.spec = dccspec(uspec = multispec( replicate(2, garch11.spec) ),
dccOrder = c(1,1),
distribution = "mvnorm")
dcc.garch11.spec
dcc.fit = dccfit(dcc.garch11.spec, data = returnIM)
class(dcc.fit)
slotNames(dcc.fit)
names(dcc.fit@mfit)
names(dcc.fit@model)
dcc.fit
plot(dcc.fit)
dcc.fcst
names(dcc.fcst@mforecast)
dcc.fcst = dccforecast(dcc.fit, n.ahead=20)
class(dcc.fcst)
slotNames(dcc.fcst)
class(dcc.fcst@mforecast)
names(dcc.fcst@mforecast)
dcc.fcst
dcc.fcst.cov <- rcov(dcc.fcst)
dcc.fcst.cov <- dcc.fcst.cov[[1]]
ts.plot(dcc.fcst.cov[1, 2, ],main = "DCC Conditional Covariance for GSPC & MSFT",ylab = "Correlation", xlab = "Time")
ts.plot(dcc.fcst.cov[1, 2, ],main = "DCC Conditional Covariance for INTC & MSFT",ylab = "Correlation", xlab = "Time")
dcc.fcst.cor <- rcor(dcc.fcst)
dcc.fcst.cor <- dcc.fcst.cor[[1]]
ts.plot(dcc.fcst.cor[1, 2, ], main = "DCC Conditional Correlation for INTC & MSFT", ylab = "Correlation", xlab = "Time")
dcc.fcst.cov
fpm(dcc.fcst)
fpm(dcc.fcst)
dcc.fcst.cor
MSFTapr <- read.table("inc/MSFTapr.csv",header=TRUE,sep=",")
INTCapr <- read.table("inc/INTCapr.csv",header=TRUE,sep=",")
M
M
M
colnames(MSFTapr)
head(MSFTapr)
tail(MSFTapr)
MSFTaprts <- xts(MSFT$Adj.Close, as.Date(MSFTapr$Date, format='%Y-%m-%d'))
INTCaprts <- xts(INTC$Adj.Close, as.Date(INTCapr$Date, format='%Y-%m-%d'))
MSFTaprts <- xts(MSFTapr$Adj.Close, as.Date(MSFTapr$Date, format='%Y-%m-%d'))
INTCaprts <- xts(INTCapr$Adj.Close, as.Date(INTCapr$Date, format='%Y-%m-%d'))
head(MSFTaprts)
head(INTCaprts)
plot(MSFTaprts, main='Closing Prices, MSFT')
plot(INTCaprts, main='Closing Prices, INTC')
MSFT.ret.apr <- CalculateReturns(MSFTaprts, method="log")
INTC.ret.apr <- CalculateReturns(INTCaprts, method="log")
head(MSFT.ret.apr)
colnames(MSFT.ret.apr) <- "MSFT"
colnames(INTC.ret.apr) <- "INTC"
MSFT.ret.apr <- MSFT.ret[-1,]
INTC.ret.apr <- INTC.ret[-1,]
head(MSFT.ret.apr)
plot(MSFT.ret.apr)
plot(INTC.ret.apr)
MSFT.ret.apr <- CalculateReturns(MSFTaprts, method="log")
INTC.ret.apr <- CalculateReturns(INTCaprts, method="log")
MSFT.ret.apr <- MSFT.ret.apr[-1,]
INTC.ret.apr <- INTC.ret.apr[-1,]
colnames(MSFT.ret.apr) <- "MSFT"
colnames(INTC.ret.apr) <- "INTC"
head(MSFT.ret.apr)
plot(MSFT.ret.apr)
plot(INTC.ret.apr)
