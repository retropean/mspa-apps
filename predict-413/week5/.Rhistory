require("dplyr")
require("Cairo")
library("rgdal")
tract <- readOGR(".",layer = "tl_2014_us_state")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state.shp")
?readOGR
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readOGR(dsn = "C:/Users/00811289/Desktop/r_map", layer = "tl_2014_us_state")
tract <- fortify(tract, region="GEO_ID")
tract <- fortify(tract, region="GEOID")
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL, type="source")
?install.packages
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL)
, type="source"
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL, type="source")
install.packages("gpclib")
install.packages('C://Users/00811289/Desktop/r_map/gpclib',repo=NULL, type="source")
sessioninfo()
r.version()
R.version()
R.version
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL, type="source")
R CMD INSTALL --build gpclib_1.5-5.tar.gz
INSTALL --build gpclib_1.5-5.tar.gz
R.version
install.packages("rgeos")
require("rgeos")
require("rgeos")
tract <- readOGR(dsn = "C:/Users/00811289/Desktop/r_map", layer = "tl_2014_us_state")
tract <- fortify(tract, region="GEOID")
require("sp")
require("ggplot2")
require("rgeos")
require("rgdal")
require("scales")
require("ggmap")
require("dplyr")
require("Cairo")
library("rgdal")
library("maptools")
tract <- fortify(tract, region="GEOID")
require("maptools")
tract <- fortify(tract, region="GEOID")
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library(httr)
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
install.packages("httr")
install.packages(httr)
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library(httr)
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
install.packages("httr")
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
# import all available data for NDSU
#ndsu_req <- GET(URL, query = list(api_key = edu_key)
install.packages("httr")
install.packages("httr")
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
View(salaries)
View(x)
ndsu_data <- content(ndsu_req)
ndsu_req <- GET(URL, query = list(api_key = edu_key)
ndsu_data <- content(ndsu_req)
ndsu_req <- GET(URL, query = list(api_key = edu_key)
v
ndsu_req <- GET(URL, query = list(api_key = edu_key))
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
URL <- "http://api.nal.usda.gov/ndb/reports/"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
URL <- "http://api.nal.usda.gov/ndb/list?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
names(ndsu_data$name)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/nutrients/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/nutrients/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key, nutrients ="204"))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key, nutrients ="204"))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/nutrients/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key, nutrients ="205"))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
train <- read.csv("C:/Users/00811289/Desktop/peakoffpeak.csv")
library(ggplot2)
ggplot(dd, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(dd$highlight)
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(dd$highlight)
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point())
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1))
days.highlight <- train$DOW[1 & 6]
dd$highlight <- ifelse(dd$days %in% days.highlight, "red", "black")
days$highlight <- ifelse(dd$days %in% days.highlight, "red", "black")
days$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point()) +
scale_colour_identity(dd$highlight)
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point()) +
scale_colour_identity(train$highlight)
ggplot(train, aes(x = days, y = things, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
ggplot(train, aes(x = DOW, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1 & 6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
dd <- data.frame(days = c("Mon","Tue","Wed","Thu","Fri"),
things = c(1, 3, 6, 4, 9))
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1]+train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1]
days.highlight <- train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1,6]
days.highlight <- train$DOW[1&6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# which days do we want to highlight?
days.highlight <- train$DOW[1+6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
View(train)
View(train)
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(
axis.text.x = element_blank(),
axis.text.y = element_blank())
graph + theme(
axis.ticks = element_blank())
graph + scale_y_continuous(breaks=seq(0,40,5))
graph + scale_y_continuous(breaks=seq(0,40,14))
graph + scale_y_continuous(breaks=seq(0,365,14))
graph + scale_x_continuous(breaks=seq(0,365,14))
graph + theme(
axis.text.y = element_blank())
graph + theme(
axis.text.x = element_blank())
graph + theme(
axis.text.x = element_blank(),axis.ticks.x = element_blank())
graph + scale_x_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_y_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_x_date(date_minor_breaks = "1 day")
library(scales)
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(breaks = date_breaks(width = "3 dats"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%m%e%y"))
graph + scale_x_date(breaks = date_breaks(width = "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks" labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%D")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%d")
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%D"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%B")
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
train$test<- format(train$Date,%d)
train$test<- format(train$Date,"%d")
train$test<- format(train$Date,format="%d")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
train <- read.csv("C:/Users/00811289/Desktop/peakoffpeak.csv")
library(ggplot2)
library(scales)
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%d"))
train$datefix<- format(train$Date,format="%d")
train$datefixdos <- as.Date(train$datefix, "%m/%d/%Y")
graph<- ggplot(train, aes(x = datefixdos, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph+ theme(
+   axis.text = element_blank())
graph + theme(axis.text = element_blank())
graph + theme(axis.label = element_blank())
graph + theme(axis.text.y = element_blank())
graph + theme(axis= element_blank())
graph + theme(axis.ticks.y = element_blank())
train$IndexDate <- as.Date(train$datefix, "%m/%d/%Y")
train$Riders<-train$Total
graph<- ggplot(train, aes(x = IndexDate, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
graph<- ggplot(train, aes(x = IndexDate, y = Riders, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
help(numeric)
source('~/.active-rstudio-document')
employ <- read.table("data/m-FamaFrench.txt",header=T)
employ <- read.table("/data/m-FamaFrench.txt",header=T)
setwd("C:/Users/00811289/Desktop/413/week5")
employ <- read.table("/data/m-FamaFrench.txt",header=T)
employ <- read.table("data/m-FamaFrench.txt",header=T)
fama <- read.table("data/m-FamaFrench.txt",header=T)
library(fBasics)
library(sjPlot)
library(fpp)
library(fUnitRoots)
source("backtest.R")
setwd("C:/Users/00811289/Desktop/413/week5")
fama <- read.table("data/m-FamaFrench.txt",header=T)
head(fama)
help(fama)
help(fix)
help(edit)
fix(fama)
fama.ts <- ts(fama$hml, start=c(1961,1), frequency=12)
plot(fama.ts, main="Fama-French factors", xlab="Year", ylab="hml")
plot(stl(fama.ts, s.window="periodic"))
monthplot(fama.ts)
acf(fama.ts)
m1=arima(fama.ts,order=c(0,0,1))
m1
tsdiag(m1)
Box.test(residuals(m1),type='Ljung')
pm1 <- predict(m1,2)
print(pm1)
lcl <- pm1$pred-1.96*pm1$se
print(lcl)
ucl <- pm1$pred+1.96*pm1$se
print(ucl)
help(predict)
pastor <- read.table("data/m-PastorStambaugh.txt",header=T)
head(pastor)
tail(pastor)
pslvl <- ts(pastor$PS_LEVEL, start=c(1962,8), frequency=12)
plot(pslvl, main="Monthly Market Liquidity Measure of Professors Pastor and Stambaugh", xlab="Year", ylab="Liquidity")
acf(pslvl)
m2=arima(pslvl[,2],order=c(5,0,0))
m2=arima(pslvl,order=c(5,0,0))
print(m2)
tsdiag(m2)
tsdiag(m2)
which.min(m2$residuals)
help(which.min)
help(which.max)
which.max(m2$residuals) #303
m2$residuals[303]
m2$residuals[441]
which.min(m2$residuals) #303
m2$residuals[303]
help(dim)
dim(pastor)
help(rep)
i303 <- rep(0,605)
i303[303] <- 1
help(arima)
m3 <- arima(pslvl,order=c(5,0,0),xreg=i303)
m3
i303[303] <- 0
m3 <- arima(pslvl,order=c(5,0,0),xreg=i303)
i303[303] <- 1
m3 <- arima(pslvl,order=c(5,0,0),xreg=i303)
m3
c1 <- c(NA,NA,NA,0,NA,NA,NA)
m3 <- arima(pslvl,order=c(5,0,0),xreg=i303,fixed=c1)
m3
modelse<-sqrt(diag(vcov(m3)))
modeltratio<-abs(m3$coef/modelse)
print(modeltratio)
c1 <- c(NA,NA,NA,0,NA,NA,NA)
m3 <- arima(pslvl,order=c(5,0,0),xreg=i303,fixed=c1)
m3
microsoft <- read.table("data/q-earn-msft.txt",header=T)
head(microsoft)
microval <- ts(microsoft$value, start=c(1986,2), frequency=4)
plot(microval, main="Microsoft Earnings Per Share", xlab="Year", ylab="EPS")
acf(pslvl)
log-microval <- log(microval)
log_microval <- log(microval)
plot(log_microval, main="Log Microsoft Earnings Per Share", xlab="Year", ylab="EPS")
m4 <- arima(log_microval,order=c(0,1,1),seasonal=list(order=c(0,1,1),period=4))
m4
tsdiag(m4,gof=20)
m5 <- arima(log_microval,order=c(0,1,1),seasonal=list(order=c(0,0,1),period=4))
m5
tsdiag(m5,gof=20)
backtest(m4,xt,81,1)
backtest(m5,xt,81,1)
backtest(m4,log_microval,81,1)
backtest(m5,log_microval,81,1)
fbliss <- read.table("data/FamaBlissdbndyields.txt",header=T)
head(fbliss)
setwd("C:/Users/00811289/Desktop/413/week5")
fbliss <- read.table("data/FamaBlissdbndyields.txt",header=T)
fbliss <- read.table("data/m-FamaBlissdbndyields.txt",header=T)
head(fbliss)
help(lm)
y1t <- ts(fbliss$yield1, start=c(1961,1), frequency=12)
y3t <- ts(fbliss$yield3, start=c(1961,1), frequency=12)
m1=lm(y3t~y1t)
summary(m1)
acf(m1$residuals)
plot(c(y1t,y3t), main="Log Microsoft Earnings Per Share", xlab="Year", ylab="EPS")
help(plot)
plot(y1t ~y3t, main="Log Microsoft Earnings Per Share", xlab="Year", ylab="EPS")
plot(y1t ~ y3t, main="Log Microsoft Earnings Per Share", xlab="Year", ylab="EPS")
plot(y1t ~ y3t, main="Log Microsoft Earnings Per Share", type="l", xlab="Year", ylab="EPS")
plot(y3t, main="Log Microsoft Earnings Per Share", type="l", xlab="Year", ylab="EPS")
plot(y1t, main="Log Microsoft Earnings Per Share", type="l", xlab="Year", ylab="EPS")
plot(y3t ~ y1t, main="Log Microsoft Earnings Per Share", type="l", xlab="Year", ylab="EPS")
plot(y1t, main="Log Microsoft Earnings Per Share", type="l", xlab="Year", ylab="EPS")
lines(y3t,col="#6BAED6" )
plot(y1t, main="Log Microsoft Earnings Per Share", type="l", xlab="Year", ylab="EPS",col="#084594")
lines(y3t,col="#6BAED6" )
plot(y1t, main="Fama-Bliss bond yields", type="l", xlab="Year", ylab="Yield",col="#084594")
lines(y3t,col="#6BAED6" )
plot(y1t, main="Fama-Bliss bond yields", type="l", xlab="Year", ylab="Yield",col="#084594")
m6 <- lm(y3t~y1t)
summary(m6)
acf(m6$residuals)
help(lm)
m6
acf(m6$residuals)
d1t <- diff(y1t)
d3t <- diff(y3t)
m2=lm(d3t~-1+d1t)
m7 <- lm(d3t~-1+d1t)
summary(m7)
print(m7)
acf(m7$residuals)
pacf(m7$residuals)
help(ar)
m8 <- ar(m7$residuals, method="mle")
m8$order
m9 <- arima(d3t, order=c(5,0,0), xreg=d1t, include.mean=FALSE)
m9
tsdiag(m9,gof=24)  ## saved into a file
m10 <- arima(d3t,order=c(5,0,0),xreg=d1t,include.mean=F,fixed=c1)
c1 <- c(NA,NA,0,NA,NA,NA)
m10 <- arima(d3t,order=c(5,0,0),xreg=d1t,include.mean=F,fixed=c1)
m10
tsdiag(m5,gof=24)
tsdiag(m10,gof=24)
tsdiag(m9,gof=24)
tsdiag(m10,gof=24)
m6 <- arima(y3t, order=c(6,0,0), xreg=y1t)
print(m6)
m11 <- arima(y3t, order=c(6,0,0), xreg=y1t)
print(m11)
tsdiag(m11,gof=24)
c2=c(NA,0,NA,NA,0,NA,NA,NA)
m12=arima(y3t,order=c(6,0,0),xreg=y1t,fixed=c2)
m12
tsdiag(m12,gof=24)
p1=c(1,-m7$coef[1:6])
s1=polyroot(p1)
s1
p1=c(1,m7$coef[1:6])
s1=polyroot(p1)
s1
p1=c(1,-m12$coef[1:6])
s1=polyroot(p1)
s1
help(polyroot)
Mod(s1)
1/Mod(s1)
