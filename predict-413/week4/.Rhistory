geom_point() +
scale_colour_identity(train$highlight)
dd <- data.frame(days = c("Mon","Tue","Wed","Thu","Fri"),
things = c(1, 3, 6, 4, 9))
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1]+train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1]
days.highlight <- train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1,6]
days.highlight <- train$DOW[1&6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# which days do we want to highlight?
days.highlight <- train$DOW[1+6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
View(train)
View(train)
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(
axis.text.x = element_blank(),
axis.text.y = element_blank())
graph + theme(
axis.ticks = element_blank())
graph + scale_y_continuous(breaks=seq(0,40,5))
graph + scale_y_continuous(breaks=seq(0,40,14))
graph + scale_y_continuous(breaks=seq(0,365,14))
graph + scale_x_continuous(breaks=seq(0,365,14))
graph + theme(
axis.text.y = element_blank())
graph + theme(
axis.text.x = element_blank())
graph + theme(
axis.text.x = element_blank(),axis.ticks.x = element_blank())
graph + scale_x_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_y_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_x_date(date_minor_breaks = "1 day")
library(scales)
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(breaks = date_breaks(width = "3 dats"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%m%e%y"))
graph + scale_x_date(breaks = date_breaks(width = "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks" labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%D")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%d")
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%D"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%B")
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
train$test<- format(train$Date,%d)
train$test<- format(train$Date,"%d")
train$test<- format(train$Date,format="%d")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
train <- read.csv("C:/Users/00811289/Desktop/peakoffpeak.csv")
library(ggplot2)
library(scales)
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%d"))
train$datefix<- format(train$Date,format="%d")
train$datefixdos <- as.Date(train$datefix, "%m/%d/%Y")
graph<- ggplot(train, aes(x = datefixdos, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph+ theme(
+   axis.text = element_blank())
graph + theme(axis.text = element_blank())
graph + theme(axis.label = element_blank())
graph + theme(axis.text.y = element_blank())
graph + theme(axis= element_blank())
graph + theme(axis.ticks.y = element_blank())
train$IndexDate <- as.Date(train$datefix, "%m/%d/%Y")
train$Riders<-train$Total
graph<- ggplot(train, aes(x = IndexDate, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
graph<- ggplot(train, aes(x = IndexDate, y = Riders, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
autoplot(y, main = expression(paste(phi, ' = 0.6')))
install.packages("AUTOPLOT")
install.packages("ggbio")
autoplot(y, main = expression(paste(phi, ' = 0.6')))
library(ggbio)
plot(y)
y1 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y1[i] <- 0.8*y[i-1] + e[i]
plot(y1)
y2 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y2[i] <- 0.9*y[i-1] + e[i]
plot(y2)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y4 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y4[i] <- .1*y[i-1] + e[i]
plot(y4)
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
plot(y)
plot(y2)
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 1*y[i-1] + e[i]
plot(y3)
adf.test(y3, alternative = "stationary")
library(fBasics)
library(sjPlot)
library(fpp)
library(backtest)
adf.test(y3, alternative = "stationary")
library(fBasics)
library(sjPlot)
library(fpp)
library(backtest)
setwd("C:/Users/00811289/Desktop/413/week3")
umc<-read.table("m-umcsent.txt",header=T)
head(umc)
tail(umc)
umc.ts <- ts(umc$VALUE, start=c(1978,1),end=c(2013,8), frequency=12)
plot(umc.ts, main="Consumer Sentiment of the University of Michigan", xlab="Year", ylab="Consumer Sentiment")
monthplot(umc.ts)
plot(stl(umc.ts, s.window="periodic"))
tsdisplay(umc.ts,main = "")
adf.test(umc.ts, alternative = "stationary")
kpss.test(umc.ts)
kpss.test(y3.ts)
kpss.test(y3)
tsdisplay(y3,main = "")
tsdisplay(y4,main = "")
tsdisplay(y,main = "")
tsdisplay(y1,main = "")
tsdisplay(y2,main = "")
tsdisplay(y3,main = "")
tsdisplay(y4,main = "")
tsdisplay(y1,main = "")
tsdisplay(y2,main = "")
tsdisplay(y,main = "")
plot(y)
tsdisplay(y,main = "")
y4 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y4[i] <- .4*y[i-1] + e[i]
tsdisplay(y4,main = "")
tsdisplay(y,main = "")  #.60
tsdisplay(y1,main = "") #.80
tsdisplay(y2,main = "") #.90
tsdisplay(y3,main = "") #1.0
tsdisplay(y4,main = "")
plot(y3)
adf.test(y3, alternative = "stationary")
kpss.test(y3)
tsdisplay(y3,main = "")
tsdisplay(y4,main = "") #.40
tsdisplay(y,main = "")  #.60
tsdisplay(y1,main = "") #.80
tsdisplay(y3,main = "") #1.0
tsdisplay(y,main = "")  #.60
tsdisplay(y1,main = "") #.80
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
y1 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y1[i] <- 0.7*y1[i-1] + e[i]
y2 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y2[i] <- 0.8*y2[i-1] + e[i]
y3 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y3[i] <- 0.9*y3[i-1] + e[i]
y4 <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y4[i] <- 1*y4[i-1] + e[i]
tsdisplay(y,main = "")  #.60
tsdisplay(y1,main = "") #.70
tsdisplay(y2,main = "") #.80
tsdisplay(y3,main = "") #.90
tsdisplay(y4,main = "") #1.0
tsdisplay(y3,main = "") #.90
tsdisplay(y2,main = "") #.80
tsdisplay(y3,main = "") #.90
tsdisplay(y2,main = "") #.80
tsdisplay(y1,main = "") #.70
tsdisplay(y,main = "")  #.60
tsdisplay(y,main = "")  #.60
tsdisplay(y2,main = "") #.80
tsdisplay(y3,main = "") #.90
tsdisplay(y4,main = "") #1.0
tsdisplay(y3,main = "") #.90
tsdisplay(y1,main = "") #.70
tsdisplay(y,main = "")  #.60
tsdisplay(y1,main = "") #.70
library(fBasics)
library(sjPlot)
library(fpp)
library(backtest)
setwd("C:/Users/00811289/Desktop/413/week4")
umc<-read.table("m-unempmean.txt",header=T)
plot(employ, main="Duration of Unemployment in the U.S.", xlab="Year", ylab="Consumer Sentiment")
employ<-read.table("m-unempmean.txt",header=T)
plot(employ, main="Duration of Unemployment in the U.S.", xlab="Year", ylab="Consumer Sentiment")
library(fBasics)
library(sjPlot)
library(fpp)
setwd("C:/Users/00811289/Desktop/413/week4")
employ<-read.table("m-unempmean.txt",header=T)
help(ts)
head(employ)
help(head)
help(head, n=20)
help(head, n=20L)
View(employ)
View(employ)
employ.ts <- ts(employ$VALUE, start=c(1948,1),end=c(2014,3), frequency=12)
employ.ts <- ts(employ$Value, start=c(1948,1),end=c(2014,3), frequency=12)
plot(employ.ts, main="Duration of Unemployment in the U.S.", xlab="Year", ylab="Unemployment")
monthplot(employ.ts)
plot(stl(employ.ts, s.window="periodic"))
monthplot(employ.ts)
adf.test(employ.ts, alternative = "stationary")
kpss.test(employ.ts)
tsdisplay(employ.ts)
help(tsdisplay)
tsdisplay(employ.ts,main="Time Series Display for Duration of Unemployment in the U.S.")
demploy <- diff(employ.ts)
tsdisplay(demploy)
tsdisplay(demploy,main="Differenced Time Series Display for data")
t.test(demploy)
Box.test(demploy,lag=12,type='Ljung')
fit3 <- Arima(euretail, order=c(0,1,3), seasonal=c(0,1,1))
res <- residuals(fit3)
tsdisplay(res)
Box.test(res, lag=16, fitdf=4, type="Ljung")
Box.test(residuals(demploy),lag=12,type='Ljung')
Box.test(residuals(demploy),lag=12,type='Ljung')
demp_resid <- residuals(demploy)
require(fUnitRoots)
install.packages("fUnitRoots")
require(fUnitRoots)
da=read.table("m-unempmean.txt",header=T)
head(da)
tdx=da[,1]+da[,2]/12
dur=da$Value
plot(tdx,dur,type='l',xlab='year',ylab='dur',main='Mean duration of unemp')
pacf(dur)
pacf(dur)
pacf(diff(dur))
m1=ar(diff(dur),method="mle")
m1$order
da=read.table("m-unempmean.txt",header=T)
head(da)
tdx=da[,1]+da[,2]/12
dur=da$Value
plot(tdx,dur,type='l',xlab='year',ylab='dur',main='Mean duration of unemp')
pacf(dur)
pacf(diff(dur))
adfTest(dur,lags=12,type="c")
adf.test(employ.ts, lags=12,type="c")
lags=12,type="c"
adfTest(dur,lags=12,type="c")
help(adfTest)
adfTest(employ.ts,lags=12,type="c")
t.test(demploy)
t.test(demploy)
t.test(demploy)
m2=arima(ddur,order=c(12,0,0),include.mean=F)
m2
m2=arima(ddur,order=c(12,0,0),include.mean=F)
ddur=diff(dur)
t.test(ddur)
m2=arima(ddur,order=c(12,0,0),include.mean=F)
m2
tsdiag(m2,gof=24)
model1 <- arima(demploy,order=c(12,0,0),include.mean=F)
model1
model1 <- arima(demploy,order=c(12,0,0),include.mean=FALSE)
model1
help(tsdiag)
tsdiag(model1,gof=24)
model2=arima(demploy,order=c(2,0,1),seasonal=list(order=c(1,0,1),period=12),include.mean=FALSE)
model2
tsdiag(model2,gof=24)
tsdisplay(res)
tsdiag(res)
tsdiag(res,gof=24)
tsdiag(fit3,gof=24)
tsdisplay(res)
accuracy(model1)
accuracy(model2)
backtest(model1,ddur,750,1,inc.mean=F)
backtest(model2,ddur,750,1,inc.mean=F)
source("backtest.R")
backtest(model1,demploy,750,1,inc.mean=F)
backtest(model2,demploy,750,1,inc.mean=F)
coil <- read.table("w-coilwtico.txt",header=T)
head(coil)
help(ts)
tail(coil)
plot(coil)
plot(coil$value)
plot(coil$Value)
employ.ts <- ts(coil$Value, start=c(1986,1), frequency=52)
help(ts)
plot(coil.ts, main="Weekly Crude Oil Prices", xlab="Year", ylab="Prices")
coil.ts <- ts(coil$Value, start=c(1986,1), frequency=52)
plot(coil.ts, main="Weekly Crude Oil Prices", xlab="Year", ylab="Prices")
monthplot(coil.ts)
plot(stl(coil.ts, s.window="periodic"))
periodic
plot(stl(coil.ts, s.window="periodic"))
dlcoil <- diff(log(coil.ts))
plot(dlcoil,type='l')
adf.test(dlcoil, alternative = "stationary")
tsdisplay(dlcoil,main="Time Series Display for Duration of Unemployment in the U.S.")
tsdisplay(coil.ts,main="Time Series Display for Weekly Crude Oil Prices")
Box.test(rtn,lag=10,type='Ljung')
Box.test(dlcoil,lag=10,type='Ljung')
plot(dlcoil,type='l')
tsdisplay(dlcoil,main="Time Series Display for Weekly Crude Oil Prices")
acf(dlcoil)
help(acf)
help(acf,lag.max = 10)
help(acf)
acf(dlcoil)
da=read.table("w-coilwtico.txt",header=T)
da=read.table("w-coilwtico.txt",header=T)
head(da)
dim(da)
tdx=c(1:1474)/52+1986
coil=da$Value
plot(tdx,coil,xlab='yeay',ylab='price',type='l',main="Weekly Crude Oil Prices")
plot(diff(coil),type='l')
plot(diff(log(coil)),type='l')
rtn=diff(log(coil))
t.test(rtn)
Box.test(rtn,lag=10,type='Ljung')
acf(rtn)
t.test(rtn)
Box.test(rtn,lag=10,type='Ljung')
acf(rtn)
acf(dlcoil)
Box.test(dlcoil,lag=10,type='Ljung')
acf(dlcoil,lag=10)
acf(dlcoil,lag=100)
coil_model1 <- ar(dlcoil, method="mle")
coil_model1$order
coil_model2 <- arima(dlcoil,order=c(11,0,0))
coil_model2
tsdiag(coil_model2)
Box.test(residuals(coil_model2),lag=12,type='Ljung')
Box.test(residuals(coil_model2),lag=11,type='Ljung')
Box.test(residuals(coil_model2),lag=1,type='Ljung')
Box.test(residuals(coil_model2),type='Ljung')
tsdiag(coil_model2, gof=20)
coil_model3 <- arima(rtn,order=c(3,0,2),include.mean=FALSE)
coil_model3
tsdiag(coil_model3,gof=20)
Box.test(residuals(coil_model3),type='Ljung')
accuracy(coil_model2)
accuracy(coil_model3)
