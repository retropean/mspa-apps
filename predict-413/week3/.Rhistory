prop.test(x=c(480,187), n=c(400,480), correct=FALSE)
prop.test(x=c(48,187), n=c(400,480), correct=FALSE)
prop.test(x=c(48,187), n=c(400,480), correct=FALSE, conf.level = .98)
prop.test(x=c(x1,x2), n=c(n1,n2), correct=FALSE, conf.level = .98)
n1<-85
n2<-90
x1<-38
x2<-23
prop.test(x=c(x1,x2), n=c(n1,n2), correct=FALSE, conf.level = .98)
prop.test(x=c(x1,x2), n=c(n1,n2), correct=FALSE, conf.level = .99)
prop.test(x=c(x1,x2), n=c(n1,n2), alternative = "greater", correct=FALSE, conf.level = .99, )
n1<-50
n2<-60
x1<-15
x2<-23
p1<-x1/n1
p2<-x2/n2
prop.test(x=c(x1,x2), n=c(n1,n2), correct=FALSE, conf.level = .90)
bolt_bus <- read.csv(file.path("C:/Users/00811289/Desktop/Bus_EDA","bb-fares-8jun.csv"), sep=",")
summary(bolt_bus)
hist(bolt_bus$fare, prob=T, ylim=c(0.0,0.5))
hist(bolt_bus$fare, ylim=c(0.0,0.5))
hist(bolt_bus$fare, ylim=c(0.0,30))
install.packages("ggplot2")
install.packages("rgdal")
install.packages("scales")
install.packages("ggmap")
install.packages("dplyr")
install.packages("Cairo")
tract <- readOGR(dsn = ".", layer = "gz_2010_13_140_00_500k")
tract <- fortify(tract, region="GEO_ID")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readShapePoly(dsn = ".", layer = "tl_2014_us_state")
require("ggplot2")
require("rgdal")
require("scales")
require("ggmap")
require("dplyr")
require("Cairo")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readShapePoly(dsn = ".", layer = "tl_2014_us_state")
require("ggplot2")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state.shp")
library)"rgdal"
library("rgdal")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readOGR(layer = "tl_2014_us_state")
library(maptools)
library("maptools")
install.packages("maptools")
library("maptools")
tract <- readOGR(layer = "tl_2014_us_state")
tract <- fortify(tract, region="GEO_ID")
tract <- readOGR(".",layer = "tl_2014_us_state")
require("dplyr")
help("rgdal")
??rgdal
require("rgdal")
install.packages("sp")
require("sp")
?install.packages
install.packages('sp_1.1-1.zip')
install.packages('/sp_1.1-1.zip')
install.packages('C:/Users/00811289/Desktop/r_map/sp_1.1-1.zip')
\
install.packages('C:\Users\00811289\Desktop\r_map\sp_1.1-1.zip')
install.packages('C:\\Users\00811289\Desktop\r_map\sp_1.1-1.zip')
install.packages('C://Users/00811289/Desktop/r_map/sp_1.1-1.zip')
install.packages('./sp_1.1-1.zip')
install.packages('./sp_1.1-1.zip',repo=NULL, type="source")
install.packages('C:\\Users\00811289\Desktop\r_map\/sp_1.1-1.zip',repo=NULL, type="source")
install.packages('C:\\Users\00811289\Desktop\r_map\sp_1.1-1.zip',repo=NULL, type="source")
install.packages('C://Users/00811289/Desktop/r_map/sp_1.1-1.zip',repo=NULL, type="source")
require("sp")
require("ggplot2")
require("rgdal")
require("scales")
require("ggmap")
require("dplyr")
require("Cairo")
library("rgdal")
tract <- readOGR(".",layer = "tl_2014_us_state")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state.shp")
?readOGR
tract <- readOGR(dsn = ".", layer = "tl_2014_us_state")
tract <- readOGR(dsn = "C:/Users/00811289/Desktop/r_map", layer = "tl_2014_us_state")
tract <- fortify(tract, region="GEO_ID")
tract <- fortify(tract, region="GEOID")
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL, type="source")
?install.packages
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL)
, type="source"
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL, type="source")
install.packages("gpclib")
install.packages('C://Users/00811289/Desktop/r_map/gpclib',repo=NULL, type="source")
sessioninfo()
r.version()
R.version()
R.version
install.packages('C://Users/00811289/Desktop/r_map/gpclib_1.5-5.tar.gz',repo=NULL, type="source")
R CMD INSTALL --build gpclib_1.5-5.tar.gz
INSTALL --build gpclib_1.5-5.tar.gz
R.version
install.packages("rgeos")
require("rgeos")
require("rgeos")
tract <- readOGR(dsn = "C:/Users/00811289/Desktop/r_map", layer = "tl_2014_us_state")
tract <- fortify(tract, region="GEOID")
require("sp")
require("ggplot2")
require("rgeos")
require("rgdal")
require("scales")
require("ggmap")
require("dplyr")
require("Cairo")
library("rgdal")
library("maptools")
tract <- fortify(tract, region="GEOID")
require("maptools")
tract <- fortify(tract, region="GEOID")
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library(httr)
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
install.packages("httr")
install.packages(httr)
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library(httr)
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
install.packages("httr")
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
# import all available data for NDSU
#ndsu_req <- GET(URL, query = list(api_key = edu_key)
install.packages("httr")
install.packages("httr")
key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key)
View(salaries)
View(x)
ndsu_data <- content(ndsu_req)
ndsu_req <- GET(URL, query = list(api_key = edu_key)
ndsu_data <- content(ndsu_req)
ndsu_req <- GET(URL, query = list(api_key = edu_key)
v
ndsu_req <- GET(URL, query = list(api_key = edu_key))
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
URL <- "http://api.nal.usda.gov/ndb/reports/"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
URL <- "http://api.nal.usda.gov/ndb/list?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
names(ndsu_data$name)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/nutrients/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/nutrients/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key, nutrients ="204"))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/reports/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key, nutrients ="204"))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
edu_key <- "P0YxrofLI0ydkKOy7b3jFTi6o80yFvyKnpsrCl9l"
library("httr")
URL <- "http://api.nal.usda.gov/ndb/nutrients/?"
# import all available data for NDSU
ndsu_req <- GET(URL, query = list(api_key = edu_key, nutrients ="205"))
ndsu_data <- content(ndsu_req)
names(ndsu_data)
train <- read.csv("C:/Users/00811289/Desktop/peakoffpeak.csv")
library(ggplot2)
ggplot(dd, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(dd$highlight)
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(dd$highlight)
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point())
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1))
days.highlight <- train$DOW[1 & 6]
dd$highlight <- ifelse(dd$days %in% days.highlight, "red", "black")
days$highlight <- ifelse(dd$days %in% days.highlight, "red", "black")
days$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point()) +
scale_colour_identity(dd$highlight)
ggplot(train, aes(x = date, y = total, colour = highlight, group = 1)) +
geom_line() +
geom_point()) +
scale_colour_identity(train$highlight)
ggplot(train, aes(x = days, y = things, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
ggplot(train, aes(x = DOW, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1 & 6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
dd <- data.frame(days = c("Mon","Tue","Wed","Thu","Fri"),
things = c(1, 3, 6, 4, 9))
# set the levels of the factor so that 'days' sorts properly
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
days.highlight <- train$DOW[1]+train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1]
days.highlight <- train$DOW[6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
days.highlight <- train$DOW[1,6]
days.highlight <- train$DOW[1&6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
# which days do we want to highlight?
days.highlight <- train$DOW[1+6]
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
View(train)
View(train)
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(
axis.text.x = element_blank(),
axis.text.y = element_blank())
graph + theme(
axis.ticks = element_blank())
graph + scale_y_continuous(breaks=seq(0,40,5))
graph + scale_y_continuous(breaks=seq(0,40,14))
graph + scale_y_continuous(breaks=seq(0,365,14))
graph + scale_x_continuous(breaks=seq(0,365,14))
graph + theme(
axis.text.y = element_blank())
graph + theme(
axis.text.x = element_blank())
graph + theme(
axis.text.x = element_blank(),axis.ticks.x = element_blank())
graph + scale_x_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_y_date(date_breaks = "1 week", date_labels = "%W")
graph + scale_x_date(date_minor_breaks = "1 day")
library(scales)
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(breaks = date_breaks(width = "3 dats"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%Y"))
graph + scale_x_date(breaks = date_breaks(width = "3 days"), labels = date_format("%m%e%y"))
graph + scale_x_date(breaks = date_breaks(width = "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks"), labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks" labels = date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks",  date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%D")
graph + scale_x_date(date_breaks= "2 weeks", date_labels="%d")
graph + scale_x_date(date_minor_breaks = "1 day")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%D"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%B")
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
train$test<- format(train$Date,%d)
train$test<- format(train$Date,"%d")
train$test<- format(train$Date,format="%d")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
train <- read.csv("C:/Users/00811289/Desktop/peakoffpeak.csv")
library(ggplot2)
library(scales)
train$days <- factor(train$DOW, levels = c(1,2,3,4,5,6,7))
# which days do we want to highlight?
train$highlight<-"black"
train$highlight[train$Peak==1] <-"red"
train$highlight <- ifelse(train$DOW %in% days.highlight, "red", "black")
train$datefix<- format(train$Date,format="%d")
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph<- ggplot(train, aes(x = Date, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph<- ggplot(train, aes(x = datefix, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%m%e%y"))
graph + scale_x_date(date_breaks= "2 weeks", labels=date_format("%d"))
train$datefix<- format(train$Date,format="%d")
train$datefixdos <- as.Date(train$datefix, "%m/%d/%Y")
graph<- ggplot(train, aes(x = datefixdos, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph
graph + scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%m%e%y")
graph+ theme(
+   axis.text = element_blank())
graph + theme(axis.text = element_blank())
graph + theme(axis.label = element_blank())
graph + theme(axis.text.y = element_blank())
graph + theme(axis= element_blank())
graph + theme(axis.ticks.y = element_blank())
train$IndexDate <- as.Date(train$datefix, "%m/%d/%Y")
train$Riders<-train$Total
graph<- ggplot(train, aes(x = IndexDate, y = Total, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
graph<- ggplot(train, aes(x = IndexDate, y = Riders, colour = highlight, group = 1)) +
geom_line() +
geom_point() +
scale_colour_identity(train$highlight)
graph + theme(axis.ticks.y = element_blank())
sqrt(9)
sqrt(300)
5/3
5/17
2/sqrt(36)
2/sqrt(360)
2/sqrt(1000)
library(fBasics)
library(sjPlot)
setwd("C:/Users/00811289/Desktop/413/week3")
ge=read.table("m-umcsent.txt",header=T)
umc<-read.table("m-umcsent.txt",header=T)
library(fBasics)
library(sjPlot)
setwd("C:/Users/00811289/Desktop/413/week3")
umc<-read.table("m-umcsent.txt",header=T)
plot(umc)
monthplot(umc)
plot(umc)
head(umc)
time<- umc[,1]+umc[,2]/12
head(time)
plot(time, umc$VALUE)
plot(time, umc$VALUE, type="l")
umc$date <- as.Date(with(umc, paste(year, mon, day,sep="-")), "%Y-%m-%d")
df$date
umc$date
plot(umc$date, umc$VALUE, type="l")
plot(umc$date, umc$VALUE, type="l", main="Consumer Sentiment of the University of Michigan")
plot(umc$date, umc$VALUE, type="l", main="Consumer Sentiment of the University of Michigan", xlab="Year", ylab="Sentiment")
plot(umc$date, umc$VALUE, type="l", main="Consumer Sentiment of the University of Michigan", xlab="Year", ylab="Consumer Sentiment")
View(umc)
View(umc)
ukcars<-ukcars
ukcarstrim <- window(ukcars,start=1997)
monthplot(ukcarstrim)
library(fBasics)
library(sjPlot)
ukcars<-ukcars
ukcarstrim <- window(ukcars,start=1997)
library(fpp)
ukcars<-ukcars
ukcarstrim <- window(ukcars,start=1997)
monthplot(ukcarstrim)
monthplot(umc)
umc-ts <- ts(umc$VALUE, frequency=12)
umc.ts <- ts(umc$VALUE, frequency=12)
head(umc)
View(umc)
View(umc)
View(umc)
umc.ts <- ts(umc$VALUE, start=c(1978,1),end=c(2003,8), frequency=12)
monthplot(umc.ts)
plot(umc.ts)
2002-1978
monthplot(umc)
plot(umc$date, umc$VALUE, type="l", main="Consumer Sentiment of the University of Michigan", xlab="Year", ylab="Consumer Sentiment")
tail(umc)
umc.ts <- ts(umc$VALUE, start=c(1978,1),end=c(2013,8), frequency=12)
plot(umc.ts)
plot(umc.ts, main="Consumer Sentiment of the University of Michigan", xlab="Year", ylab="Consumer Sentiment")
monthplot(umc.ts)
stl(umc.ts, s.window="periodic")
plot(stl(umc.ts, s.window="periodic"))
monthplot(umc.ts)
plot(stl(umc.ts, s.window="periodic"))
adf.test(umc.ts, alternative = "stationary")
kpss.test(umc.ts)
tsdisplay(umc.ts,main="")
tsdisplay(diff(umc.ts),main="")
dumc.ts <- diff(umc.ts)
tsdisplay(dumc.ts,main="")
t.test(dumc.ts)
help(ar)
ar(dumc.ts, method="mle")
help(arima)
fit <- Arima(dumc.ts, order=c(5,0,0))
print(fit)
Box.test(dumc.ts,lag=12,type='Ljung')
t.test(dumc.ts)
ar(dumc.ts, method = "mle")
m1<-ar(dumc.ts, method = "mle")
m1$order
acf(dumc.ts)
fit <- Arima(dumc.ts, order=c(5,0,0), include.mean=F)
fit
m2 <- Arima(dumc.ts, order=c(5,0,0), include.mean=F)
m2
p1=c(1,-m2$coef)
r1=polyroot(p1)
r1
tsdiag(m2)
